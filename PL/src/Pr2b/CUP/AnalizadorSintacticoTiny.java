
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Mar 17 18:01:46 CET 2022
//----------------------------------------------------

package Pr2b.CUP;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Mar 17 18:01:46 CET 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\006\005\000\002\007\006\000\002\010\004\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\004\000\002\012\005\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\010\000\002\017" +
    "\006\000\002\020\005\000\002\020\003\000\002\021\004" +
    "\000\002\022\004\000\002\023\005\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\005\000\002\026\003\000" +
    "\002\026\002\000\002\027\007\000\002\030\011\000\002" +
    "\031\007\000\002\032\004\000\002\033\004\000\002\034" +
    "\003\000\002\035\004\000\002\036\004\000\002\037\005" +
    "\000\002\040\004\000\002\040\005\000\002\041\005\000" +
    "\002\041\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\043\005\000\002\043\005" +
    "\000\002\043\003\000\002\044\005\000\002\044\003\000" +
    "\002\045\005\000\002\045\003\000\002\046\005\000\002" +
    "\046\003\000\002\047\004\000\002\047\004\000\002\047" +
    "\003\000\002\050\006\000\002\050\005\000\002\050\005" +
    "\000\002\050\003\000\002\051\004\000\002\051\003\000" +
    "\002\052\005\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\060\004\006\005\042\010\014\012\033\013" +
    "\052\014\022\022\041\025\034\026\030\041\017\052\026" +
    "\053\054\055\050\060\016\065\027\066\013\067\046\070" +
    "\012\071\044\072\063\073\015\074\023\075\031\001\002" +
    "\000\016\002\uffd7\016\uffd7\020\uffd7\042\uffd7\054\uffd7\057" +
    "\uffd7\001\002\000\016\002\uffdd\016\uffdd\020\uffdd\042\uffdd" +
    "\054\uffdd\057\uffdd\001\002\000\072\002\uffc3\006\uffc3\007" +
    "\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\054\uffc3\056\uffc3\057\uffc3\001" +
    "\002\000\016\002\uffd9\016\uffd9\020\uffd9\042\uffd9\054\uffd9" +
    "\057\uffd9\001\002\000\016\002\uffd5\016\uffd5\020\uffd5\042" +
    "\uffd5\054\uffd5\057\uffd5\001\002\000\006\017\244\020\245" +
    "\001\002\000\030\004\006\005\042\010\014\012\033\022" +
    "\041\025\034\026\030\052\026\053\054\074\023\075\031" +
    "\001\002\000\030\004\006\005\042\010\014\012\033\022" +
    "\041\025\034\026\030\052\026\053\054\074\023\075\031" +
    "\001\002\000\030\004\006\005\042\010\014\012\033\022" +
    "\041\025\034\026\030\052\026\053\054\074\023\075\031" +
    "\001\002\000\022\011\120\047\111\050\124\051\113\061" +
    "\117\062\115\064\123\074\122\001\002\000\004\074\226" +
    "\001\002\000\060\004\006\005\042\010\014\012\033\013" +
    "\052\014\022\022\041\025\034\026\030\041\017\052\026" +
    "\053\054\055\050\060\016\065\027\066\013\067\046\070" +
    "\012\071\044\072\063\073\015\074\023\075\031\001\002" +
    "\000\072\002\uffa9\006\uffa9\007\uffa9\015\uffa9\016\uffa9\020" +
    "\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\054\uffa9\056\uffa9\057\uffa9\001\002\000\016\002\uffd8\016" +
    "\uffd8\020\uffd8\042\uffd8\054\uffd8\057\uffd8\001\002\000\030" +
    "\004\006\005\042\010\014\012\033\022\041\025\034\026" +
    "\030\052\026\053\054\074\023\075\031\001\002\000\072" +
    "\002\uffbe\006\uffbe\007\uffbe\015\uffbe\016\uffbe\020\uffbe\021" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\054\uffbe" +
    "\056\uffbe\057\uffbe\001\002\000\016\002\uffdf\016\uffdf\020" +
    "\uffdf\042\uffdf\054\uffdf\057\uffdf\001\002\000\016\002\uffdc" +
    "\016\uffdc\020\uffdc\042\uffdc\054\uffdc\057\uffdc\001\002\000" +
    "\072\002\uffc1\006\uffc1\007\uffc1\015\uffc1\016\uffc1\020\uffc1" +
    "\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\054" +
    "\uffc1\056\uffc1\057\uffc1\001\002\000\030\004\006\005\042" +
    "\010\014\012\033\022\041\025\034\026\030\052\026\053" +
    "\054\074\023\075\031\001\002\000\024\004\006\005\042" +
    "\012\033\022\041\026\030\052\026\053\054\074\023\075" +
    "\031\001\002\000\072\002\uffbf\006\uffbf\007\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\054\uffbf\056\uffbf\057\uffbf\001\002\000\016" +
    "\002\uffdb\016\uffdb\020\uffdb\042\uffdb\054\uffdb\057\uffdb\001" +
    "\002\000\072\002\uffbd\006\uffbd\007\uffbd\015\uffbd\016\uffbd" +
    "\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\054\uffbd\056\uffbd\057\uffbd\001\002\000\024\004\006" +
    "\005\042\012\033\022\041\026\030\052\026\053\054\074" +
    "\023\075\031\001\002\000\006\017\ufffc\020\ufffc\001\002" +
    "\000\004\002\211\001\002\000\016\002\uffda\016\uffda\020" +
    "\uffda\042\uffda\054\uffda\057\uffda\001\002\000\016\002\uffde" +
    "\016\uffde\020\uffde\042\uffde\054\uffde\057\uffde\001\002\000" +
    "\030\004\006\005\042\010\014\012\033\022\041\025\034" +
    "\026\030\052\026\053\054\074\023\075\031\001\002\000" +
    "\072\002\uffc2\006\uffc2\007\uffc2\015\uffc2\016\uffc2\020\uffc2" +
    "\021\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\054" +
    "\uffc2\056\uffc2\057\uffc2\001\002\000\016\002\uffd4\016\uffd4" +
    "\020\uffd4\042\uffd4\054\uffd4\057\uffd4\001\002\000\016\002" +
    "\uffcb\016\uffcb\020\uffcb\042\uffcb\054\uffcb\057\uffcb\001\002" +
    "\000\010\002\uffff\020\203\042\uffff\001\002\000\030\004" +
    "\006\005\042\010\014\012\033\022\041\025\034\026\030" +
    "\052\026\053\054\074\023\075\031\001\002\000\006\017" +
    "\ufffa\020\ufffa\001\002\000\030\004\006\005\042\010\014" +
    "\012\033\022\041\025\034\026\030\052\026\053\054\074" +
    "\023\075\031\001\002\000\016\002\uffd6\016\uffd6\020\uffd6" +
    "\042\uffd6\054\uffd6\057\uffd6\001\002\000\004\074\161\001" +
    "\002\000\072\002\uffab\006\uffab\007\uffab\015\uffab\016\uffab" +
    "\020\uffab\021\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\054\uffab\056\uffab\057\uffab\001\002\000\072\002\uffc0" +
    "\006\uffc0\007\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\054\uffc0\056\uffc0" +
    "\057\uffc0\001\002\000\072\002\uffad\006\uffad\007\uffad\015" +
    "\uffad\016\uffad\020\uffad\021\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\054\uffad\056\uffad\057\uffad\001\002\000" +
    "\006\017\ufffd\020\ufffd\001\002\000\072\002\uffb1\006\uffb1" +
    "\007\uffb1\015\uffb1\016\uffb1\020\uffb1\021\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\154\040\uffb1\042" +
    "\uffb1\043\152\044\153\045\uffb1\054\uffb1\056\uffb1\057\uffb1" +
    "\001\002\000\064\002\uffb4\006\uffb4\007\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4\025\uffb4\026\145" +
    "\027\150\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\146\040\uffb4\042\uffb4\045\uffb4\054\uffb4\056\uffb4" +
    "\057\uffb4\001\002\000\056\002\uffb6\006\uffb6\007\uffb6\015" +
    "\uffb6\016\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\040" +
    "\uffb6\042\uffb6\045\uffb6\054\uffb6\056\uffb6\057\uffb6\001\002" +
    "\000\056\002\uffb8\006\uffb8\007\uffb8\015\uffb8\016\uffb8\020" +
    "\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\030\077\031\100" +
    "\032\104\033\101\034\105\035\102\040\uffb8\042\uffb8\045" +
    "\uffb8\054\uffb8\056\uffb8\057\uffb8\001\002\000\022\011\120" +
    "\047\111\050\124\051\113\061\117\062\115\064\123\074" +
    "\122\001\002\000\042\002\uffba\006\071\007\075\015\uffba" +
    "\016\uffba\020\uffba\021\uffba\023\uffba\024\072\025\073\040" +
    "\uffba\042\uffba\045\uffba\054\uffba\056\uffba\057\uffba\001\002" +
    "\000\004\021\067\001\002\000\006\017\ufffb\020\ufffb\001" +
    "\002\000\030\004\006\005\042\010\014\012\033\022\041" +
    "\025\034\026\030\052\026\053\054\074\023\075\031\001" +
    "\002\000\016\002\uffd3\016\uffd3\020\uffd3\042\uffd3\054\uffd3" +
    "\057\uffd3\001\002\000\030\004\uffa8\005\uffa8\010\uffa8\012" +
    "\uffa8\022\uffa8\025\uffa8\026\uffa8\052\uffa8\053\uffa8\074\uffa8" +
    "\075\uffa8\001\002\000\030\004\006\005\042\010\014\012" +
    "\033\022\041\025\034\026\030\052\026\053\054\074\023" +
    "\075\031\001\002\000\030\004\006\005\042\010\014\012" +
    "\033\022\041\025\034\026\030\052\026\053\054\074\023" +
    "\075\031\001\002\000\030\004\006\005\042\010\014\012" +
    "\033\022\041\025\034\026\030\052\026\053\054\074\023" +
    "\075\031\001\002\000\030\004\uffa7\005\uffa7\010\uffa7\012" +
    "\uffa7\022\uffa7\025\uffa7\026\uffa7\052\uffa7\053\uffa7\074\uffa7" +
    "\075\uffa7\001\002\000\056\002\uffb9\006\uffb9\007\uffb9\015" +
    "\uffb9\016\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\030\077\031\100\032\104\033\101\034\105\035\102\040" +
    "\uffb9\042\uffb9\045\uffb9\054\uffb9\056\uffb9\057\uffb9\001\002" +
    "\000\030\004\uffa6\005\uffa6\010\uffa6\012\uffa6\022\uffa6\025" +
    "\uffa6\026\uffa6\052\uffa6\053\uffa6\074\uffa6\075\uffa6\001\002" +
    "\000\030\004\uffa5\005\uffa5\010\uffa5\012\uffa5\022\uffa5\025" +
    "\uffa5\026\uffa5\052\uffa5\053\uffa5\074\uffa5\075\uffa5\001\002" +
    "\000\030\004\uffa3\005\uffa3\010\uffa3\012\uffa3\022\uffa3\025" +
    "\uffa3\026\uffa3\052\uffa3\053\uffa3\074\uffa3\075\uffa3\001\002" +
    "\000\030\004\uffa1\005\uffa1\010\uffa1\012\uffa1\022\uffa1\025" +
    "\uffa1\026\uffa1\052\uffa1\053\uffa1\074\uffa1\075\uffa1\001\002" +
    "\000\030\004\006\005\042\010\014\012\033\022\041\025" +
    "\034\026\030\052\026\053\054\074\023\075\031\001\002" +
    "\000\030\004\uffa4\005\uffa4\010\uffa4\012\uffa4\022\uffa4\025" +
    "\uffa4\026\uffa4\052\uffa4\053\uffa4\074\uffa4\075\uffa4\001\002" +
    "\000\030\004\uffa2\005\uffa2\010\uffa2\012\uffa2\022\uffa2\025" +
    "\uffa2\026\uffa2\052\uffa2\053\uffa2\074\uffa2\075\uffa2\001\002" +
    "\000\056\002\uffb7\006\uffb7\007\uffb7\015\uffb7\016\uffb7\020" +
    "\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\040\uffb7\042\uffb7\045" +
    "\uffb7\054\uffb7\056\uffb7\057\uffb7\001\002\000\036\002\uffbb" +
    "\006\071\007\075\015\uffbb\016\uffbb\020\uffbb\021\uffbb\023" +
    "\uffbb\040\uffbb\042\uffbb\045\uffbb\054\uffbb\056\uffbb\057\uffbb" +
    "\001\002\000\032\002\uffbc\015\uffbc\016\uffbc\020\uffbc\021" +
    "\uffbc\023\uffbc\040\uffbc\042\uffbc\045\uffbc\054\uffbc\056\uffbc" +
    "\057\uffbc\001\002\000\006\046\uffea\074\uffea\001\002\000" +
    "\004\074\144\001\002\000\006\046\uffe8\074\uffe8\001\002" +
    "\000\006\046\uffec\074\uffec\001\002\000\004\037\137\001" +
    "\002\000\006\046\uffef\074\uffef\001\002\000\004\041\127" +
    "\001\002\000\006\046\uffe7\074\uffe7\001\002\000\006\046" +
    "\uffeb\074\uffeb\001\002\000\006\046\uffee\074\uffee\001\002" +
    "\000\022\011\120\047\111\050\124\051\113\061\117\062" +
    "\115\064\123\074\122\001\002\000\006\046\uffe9\074\uffe9" +
    "\001\002\000\006\046\uffed\074\uffed\001\002\000\006\046" +
    "\uffe1\074\uffe1\001\002\000\022\011\120\047\111\050\124" +
    "\051\113\061\117\062\115\064\123\074\122\001\002\000" +
    "\004\074\136\001\002\000\006\020\134\042\133\001\002" +
    "\000\006\020\uffe3\042\uffe3\001\002\000\006\046\uffe5\074" +
    "\uffe5\001\002\000\022\011\120\047\111\050\124\051\113" +
    "\061\117\062\115\064\123\074\122\001\002\000\006\020" +
    "\uffe4\042\uffe4\001\002\000\006\020\uffe2\042\uffe2\001\002" +
    "\000\004\004\140\001\002\000\004\040\141\001\002\000" +
    "\004\063\142\001\002\000\022\011\120\047\111\050\124" +
    "\051\113\061\117\062\115\064\123\074\122\001\002\000" +
    "\006\046\uffe6\074\uffe6\001\002\000\006\017\ufff9\020\ufff9" +
    "\001\002\000\030\004\uffa0\005\uffa0\010\uffa0\012\uffa0\022" +
    "\uffa0\025\uffa0\026\uffa0\052\uffa0\053\uffa0\074\uffa0\075\uffa0" +
    "\001\002\000\030\004\uff9e\005\uff9e\010\uff9e\012\uff9e\022" +
    "\uff9e\025\uff9e\026\uff9e\052\uff9e\053\uff9e\074\uff9e\075\uff9e" +
    "\001\002\000\030\004\006\005\042\010\014\012\033\022" +
    "\041\025\034\026\030\052\026\053\054\074\023\075\031" +
    "\001\002\000\030\004\uff9f\005\uff9f\010\uff9f\012\uff9f\022" +
    "\uff9f\025\uff9f\026\uff9f\052\uff9f\053\uff9f\074\uff9f\075\uff9f" +
    "\001\002\000\056\002\uffb5\006\uffb5\007\uffb5\015\uffb5\016" +
    "\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\042" +
    "\uffb5\045\uffb5\054\uffb5\056\uffb5\057\uffb5\001\002\000\004" +
    "\074\160\001\002\000\004\074\157\001\002\000\030\004" +
    "\006\005\042\010\014\012\033\022\041\025\034\026\030" +
    "\052\026\053\054\074\023\075\031\001\002\000\004\040" +
    "\156\001\002\000\072\002\uffb0\006\uffb0\007\uffb0\015\uffb0" +
    "\016\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\054\uffb0\056\uffb0\057\uffb0\001\002\000\072" +
    "\002\uffae\006\uffae\007\uffae\015\uffae\016\uffae\020\uffae\021" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\042\uffae\043\uffae\044\uffae\045\uffae\054\uffae" +
    "\056\uffae\057\uffae\001\002\000\072\002\uffaf\006\uffaf\007" +
    "\uffaf\015\uffaf\016\uffaf\020\uffaf\021\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\054\uffaf\056\uffaf\057\uffaf\001" +
    "\002\000\004\022\163\001\002\000\004\041\017\001\002" +
    "\000\024\011\120\023\167\047\111\050\124\051\113\061" +
    "\117\062\115\064\123\074\122\001\002\000\006\046\174" +
    "\074\173\001\002\000\006\023\ufff3\045\ufff3\001\002\000" +
    "\006\023\171\045\170\001\002\000\004\041\ufff6\001\002" +
    "\000\022\011\120\047\111\050\124\051\113\061\117\062" +
    "\115\064\123\074\122\001\002\000\004\041\ufff5\001\002" +
    "\000\006\023\ufff4\045\ufff4\001\002\000\006\023\ufff2\045" +
    "\ufff2\001\002\000\004\074\175\001\002\000\006\023\ufff1" +
    "\045\ufff1\001\002\000\006\017\ufff7\020\ufff7\001\002\000" +
    "\004\056\200\001\002\000\054\004\006\005\042\010\014" +
    "\012\033\014\022\022\041\025\034\026\030\041\017\052" +
    "\026\053\054\055\050\057\uffd1\060\016\065\027\066\013" +
    "\067\046\070\012\071\044\074\023\075\031\001\002\000" +
    "\004\057\205\001\002\000\012\016\uffd2\020\203\054\uffd2" +
    "\057\uffd2\001\002\000\052\004\006\005\042\010\014\012" +
    "\033\014\022\022\041\025\034\026\030\041\017\052\026" +
    "\053\054\055\050\060\016\065\027\066\013\067\046\070" +
    "\012\071\044\074\023\075\031\001\002\000\016\002\uffe0" +
    "\016\uffe0\020\uffe0\042\uffe0\054\uffe0\057\uffe0\001\002\000" +
    "\016\002\uffce\016\uffce\020\uffce\042\uffce\054\uffce\057\uffce" +
    "\001\002\000\016\002\uffcd\016\uffcd\020\uffcd\042\uffcd\054" +
    "\uffcd\057\uffcd\001\002\000\004\023\210\001\002\000\072" +
    "\002\uffaa\006\uffaa\007\uffaa\015\uffaa\016\uffaa\020\uffaa\021" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\054\uffaa" +
    "\056\uffaa\057\uffaa\001\002\000\004\002\000\001\002\000" +
    "\072\002\uffb3\006\uffb3\007\uffb3\015\uffb3\016\uffb3\020\uffb3" +
    "\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\154\040\uffb3\042\uffb3\043\152\044\153\045\uffb3\054" +
    "\uffb3\056\uffb3\057\uffb3\001\002\000\072\002\uffac\006\uffac" +
    "\007\uffac\015\uffac\016\uffac\020\uffac\021\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\054\uffac\056\uffac\057\uffac" +
    "\001\002\000\016\002\uffca\016\uffca\020\uffca\042\uffca\054" +
    "\uffca\057\uffca\001\002\000\004\015\216\001\002\000\056" +
    "\004\006\005\042\010\014\012\033\014\022\016\uffd1\022" +
    "\041\025\034\026\030\041\017\052\026\053\054\054\uffd1" +
    "\055\050\060\016\065\027\066\013\067\046\070\012\071" +
    "\044\074\023\075\031\001\002\000\006\016\220\054\221" +
    "\001\002\000\054\004\006\005\042\010\014\012\033\014" +
    "\022\022\041\025\034\026\030\041\017\052\026\053\054" +
    "\054\uffd1\055\050\060\016\065\027\066\013\067\046\070" +
    "\012\071\044\074\023\075\031\001\002\000\016\002\uffd0" +
    "\016\uffd0\020\uffd0\042\uffd0\054\uffd0\057\uffd0\001\002\000" +
    "\004\054\223\001\002\000\016\002\uffcf\016\uffcf\020\uffcf" +
    "\042\uffcf\054\uffcf\057\uffcf\001\002\000\004\042\225\001" +
    "\002\000\020\002\ufff0\016\ufff0\017\ufff0\020\ufff0\042\ufff0" +
    "\054\ufff0\057\ufff0\001\002\000\004\022\227\001\002\000" +
    "\032\004\006\005\042\010\014\012\033\022\041\023\231" +
    "\025\034\026\030\052\026\053\054\074\023\075\031\001" +
    "\002\000\016\002\uffc8\016\uffc8\020\uffc8\042\uffc8\054\uffc8" +
    "\057\uffc8\001\002\000\016\002\uffc7\016\uffc7\020\uffc7\042" +
    "\uffc7\054\uffc7\057\uffc7\001\002\000\006\023\235\045\234" +
    "\001\002\000\006\023\uffc4\045\uffc4\001\002\000\030\004" +
    "\006\005\042\010\014\012\033\022\041\025\034\026\030" +
    "\052\026\053\054\074\023\075\031\001\002\000\016\002" +
    "\uffc6\016\uffc6\020\uffc6\042\uffc6\054\uffc6\057\uffc6\001\002" +
    "\000\006\023\uffc5\045\uffc5\001\002\000\004\074\240\001" +
    "\002\000\006\017\ufff8\020\ufff8\001\002\000\064\002\uffb2" +
    "\006\uffb2\007\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\042" +
    "\uffb2\045\uffb2\054\uffb2\056\uffb2\057\uffb2\001\002\000\016" +
    "\002\uffc9\016\uffc9\020\uffc9\042\uffc9\054\uffc9\057\uffc9\001" +
    "\002\000\016\002\uffcc\016\uffcc\020\uffcc\042\uffcc\054\uffcc" +
    "\057\uffcc\001\002\000\052\004\006\005\042\010\014\012" +
    "\033\014\022\022\041\025\034\026\030\041\017\052\026" +
    "\053\054\055\050\060\016\065\027\066\013\067\046\070" +
    "\012\071\044\074\023\075\031\001\002\000\010\013\052" +
    "\072\063\073\015\001\002\000\006\017\ufffe\020\ufffe\001" +
    "\002\000\010\002\001\020\203\042\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\072\002\035\003\010\004\055\005\034\006" +
    "\065\007\046\013\042\023\044\024\023\025\037\027\004" +
    "\030\024\031\031\032\036\033\006\034\020\035\003\036" +
    "\050\037\007\042\017\043\064\044\063\045\061\046\060" +
    "\047\057\050\056\051\054\052\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\042\017\043" +
    "\242\044\063\045\061\046\060\047\057\050\056\051\054" +
    "\052\052\001\001\000\024\042\017\043\241\044\063\045" +
    "\061\046\060\047\057\050\056\051\054\052\052\001\001" +
    "\000\014\042\017\047\240\050\056\051\054\052\052\001" +
    "\001\000\014\014\236\015\115\016\124\017\113\022\120" +
    "\001\001\000\002\001\001\000\072\002\223\003\010\004" +
    "\055\005\034\006\065\007\046\013\042\023\044\024\023" +
    "\025\037\027\004\030\024\031\031\032\036\033\006\034" +
    "\020\035\003\036\050\037\007\042\017\043\064\044\063" +
    "\045\061\046\060\047\057\050\056\051\054\052\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\042\017" +
    "\043\214\044\063\045\061\046\060\047\057\050\056\051" +
    "\054\052\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\042\017\043" +
    "\213\044\063\045\061\046\060\047\057\050\056\051\054" +
    "\052\052\001\001\000\010\042\017\051\212\052\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\042\017\050\211\051\054\052\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\042\017\043\206\044\063\045\061\046" +
    "\060\047\057\050\056\051\054\052\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\042\017\043\205\044\063\045\061\046\060" +
    "\047\057\050\056\051\054\052\052\001\001\000\002\001" +
    "\001\000\024\042\017\043\176\044\063\045\061\046\060" +
    "\047\057\050\056\051\054\052\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\146\001\001\000\002\001\001\000\004\054\102" +
    "\001\001\000\014\014\111\015\115\016\124\017\113\022" +
    "\120\001\001\000\004\053\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\042\017\043\067\044\063\045" +
    "\061\046\060\047\057\050\056\051\054\052\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\042\017\043" +
    "\107\044\063\045\061\046\060\047\057\050\056\051\054" +
    "\052\052\001\001\000\022\042\017\044\106\045\061\046" +
    "\060\047\057\050\056\051\054\052\052\001\001\000\020" +
    "\042\017\045\075\046\060\047\057\050\056\051\054\052" +
    "\052\001\001\000\002\001\001\000\004\054\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\042\017\046\105\047\057\050\056" +
    "\051\054\052\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\125\015\115\016\124\017\113" +
    "\022\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\127\015\115\016\124\017\113" +
    "\020\130\021\131\022\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\127\015\115\016\124\017\113\021\134\022\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\142\015" +
    "\115\016\124\017\113\022\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\042\017\047\150\050\056\051\054\052\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\042\017\043\154\044\063\045\061" +
    "\046\060\047\057\050\056\051\054\052\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\161\001\001\000\004\013\175\001" +
    "\001\000\020\011\165\012\164\014\163\015\115\016\124" +
    "\017\113\022\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\171" +
    "\014\163\015\115\016\124\017\113\022\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\013\042\023\201\024\023\025\037\026\200" +
    "\027\004\030\024\031\031\032\036\033\006\034\020\035" +
    "\003\036\050\037\007\042\017\043\064\044\063\045\061" +
    "\046\060\047\057\050\056\051\054\052\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\013\042\024\203" +
    "\025\037\027\004\030\024\031\031\032\036\033\006\034" +
    "\020\035\003\036\050\037\007\042\017\043\064\044\063" +
    "\045\061\046\060\047\057\050\056\051\054\052\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\013\042\023\201\024\023\025\037\026" +
    "\216\027\004\030\024\031\031\032\036\033\006\034\020" +
    "\035\003\036\050\037\007\042\017\043\064\044\063\045" +
    "\061\046\060\047\057\050\056\051\054\052\052\001\001" +
    "\000\002\001\001\000\060\013\042\023\201\024\023\025" +
    "\037\026\221\027\004\030\024\031\031\032\036\033\006" +
    "\034\020\035\003\036\050\037\007\042\017\043\064\044" +
    "\063\045\061\046\060\047\057\050\056\051\054\052\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\227" +
    "\001\001\000\026\041\231\042\017\043\232\044\063\045" +
    "\061\046\060\047\057\050\056\051\054\052\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\042\017\043\235\044\063\045\061" +
    "\046\060\047\057\050\056\051\054\052\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\013\042\023\246\024\023\025\037\027\004" +
    "\030\024\031\031\032\036\033\006\034\020\035\003\036" +
    "\050\037\007\042\017\043\064\044\063\045\061\046\060" +
    "\047\057\050\056\051\054\052\052\001\001\000\012\004" +
    "\245\005\034\006\065\007\046\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones SEP_SEC Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaraciones SEP_INS Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= DeclaracionVar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= DeclaracionTipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= DeclaracionProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionVar ::= VAR Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionTipo ::= TYPE Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DeclaracionTipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionProc ::= PROC ID ParametrosFormales Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DeclaracionProc",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParametrosFormales ::= PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ParametrosFormales ::= PAP Parametros PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parametros ::= Parametros COMA Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parametro ::= Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parametro ::= Tipo OP_AMP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bloque ::= LLAVE_AP Programa LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= TipoBasico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= TipoArray 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= TipoRegistro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= TipoPuntero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TipoBasico ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TipoBasico ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TipoBasico ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TipoBasico ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TipoArray ::= ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoArray",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TipoRegistro ::= RECORD LLAVE_AP Campos LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoRegistro",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Campos ::= Campos SEP_INS Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Campos ::= Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Campo ::= Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campo",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TipoPuntero ::= POINTER Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoPuntero",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instrucciones ::= Instrucciones SEP_INS Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= InstrAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= InstrIfThen 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= InstrIfThenElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InstrWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= InstrLectura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= InstrEscritura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= InstrNewLine 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion ::= InstrReservMem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion ::= InstrLibMem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion ::= InstrInvocProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruccion ::= Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InstrAsig ::= E0 OP_ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrAsig",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BloqueOpcional ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueOpcional",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BloqueOpcional ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueOpcional",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InstrIfThen ::= IF E0 THEN BloqueOpcional ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrIfThen",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InstrIfThenElse ::= IF E0 THEN BloqueOpcional ELSE BloqueOpcional ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrIfThenElse",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InstrWhile ::= WHILE E0 DO BloqueOpcional ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrWhile",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InstrLectura ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrLectura",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstrEscritura ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrEscritura",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InstrNewLine ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrNewLine",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InstrReservMem ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrReservMem",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InstrLibMem ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrLibMem",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InstrInvocProc ::= CALL ID ParametrosReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstrInvocProc",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ParametrosReales ::= PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosReales",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ParametrosReales ::= PAP Expresiones PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosReales",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresiones ::= Expresiones COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresiones",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresiones ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresiones",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EBasica ::= NUM_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EBasica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EBasica ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EBasica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EBasica ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EBasica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EBasica ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EBasica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EBasica ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EBasica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EBasica ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EBasica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EBasica ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EBasica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E0 ::= E1 OP_SUMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E0 ::= E1 OP_RESTA E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E1 ::= E1 op1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E2 ::= E2 op2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E3 ::= E4 op3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E4 ::= OP_RESTA E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E5 ::= E5 CORCHETE_AP E0 CORCHETE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E5 ::= E5 PUNTO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E5 ::= E5 OP_FLECHA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E6 ::= OP_MULT E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E7 ::= EBasica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op1 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op2 ::= OP_MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op2 ::= OP_MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op2 ::= OP_MEN_IG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op2 ::= OP_MAY_IG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op2 ::= OP_COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // op2 ::= OP_DIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op3 ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // op3 ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // op3 ::= OP_100 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

