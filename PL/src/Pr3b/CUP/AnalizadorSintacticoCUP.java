
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 24 13:04:08 CEST 2022
//----------------------------------------------------

package Pr3b.CUP;

import java_cup.runtime.*;
import Pr3a.SemOps;
import Pr3a.TinyASint.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 24 13:04:08 CEST 2022
  */
public class AnalizadorSintacticoCUP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCUP() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCUP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCUP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\006\005\000\002\007\006\000\002\010\004\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\004\000\002\012\005\000\002\013\005\000\002\014\003" +
    "\000\002\014\002\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\010\000\002\020\006\000\002\021\005" +
    "\000\002\021\003\000\002\022\004\000\002\023\004\000" +
    "\002\024\005\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\002\000\002" +
    "\030\007\000\002\031\011\000\002\032\007\000\002\033" +
    "\004\000\002\034\004\000\002\035\003\000\002\036\004" +
    "\000\002\037\004\000\002\040\005\000\002\041\004\000" +
    "\002\041\005\000\002\042\005\000\002\042\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\005\000\002\044\005\000\002\044\003\000" +
    "\002\045\005\000\002\045\003\000\002\046\005\000\002" +
    "\046\003\000\002\047\005\000\002\047\003\000\002\050" +
    "\004\000\002\050\004\000\002\050\003\000\002\051\006" +
    "\000\002\051\005\000\002\051\005\000\002\051\003\000" +
    "\002\052\004\000\002\052\003\000\002\053\005\000\002" +
    "\053\003\000\002\054\003\000\002\054\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\060\007\051\012\034\013\030\026\017\037" +
    "\026\040\054\043\014\045\033\046\052\047\022\053\047" +
    "\056\016\063\027\064\012\065\043\066\013\067\044\070" +
    "\063\071\015\072\006\073\041\074\031\075\024\001\002" +
    "\000\016\002\uffd5\005\uffd5\027\uffd5\051\uffd5\052\uffd5\055" +
    "\uffd5\001\002\000\016\002\uffdb\005\uffdb\027\uffdb\051\uffdb" +
    "\052\uffdb\055\uffdb\001\002\000\072\002\uffc1\005\uffc1\006" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\041\uffc1" +
    "\042\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\001" +
    "\002\000\016\002\uffd3\005\uffd3\027\uffd3\051\uffd3\052\uffd3" +
    "\055\uffd3\001\002\000\016\002\uffd7\005\uffd7\027\uffd7\051" +
    "\uffd7\052\uffd7\055\uffd7\001\002\000\006\004\245\005\246" +
    "\001\002\000\030\007\051\012\034\013\030\037\026\040" +
    "\054\043\014\045\033\072\006\073\041\074\031\075\024" +
    "\001\002\000\030\007\051\012\034\013\030\037\026\040" +
    "\054\043\014\045\033\072\006\073\041\074\031\075\024" +
    "\001\002\000\030\007\051\012\034\013\030\037\026\040" +
    "\054\043\014\045\033\072\006\073\041\074\031\075\024" +
    "\001\002\000\022\034\116\035\130\036\120\044\125\057" +
    "\124\060\122\062\131\075\127\001\002\000\004\075\227" +
    "\001\002\000\062\007\051\012\034\013\030\026\017\027" +
    "\uffee\037\026\040\054\043\014\045\033\046\052\047\022" +
    "\053\047\056\016\063\027\064\012\065\043\066\013\067" +
    "\044\070\063\071\015\072\006\073\041\074\031\075\024" +
    "\001\002\000\072\002\uffa7\005\uffa7\006\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\041\uffa7\042\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\054\uffa7\055\uffa7\001\002\000\016\002" +
    "\uffd6\005\uffd6\027\uffd6\051\uffd6\052\uffd6\055\uffd6\001\002" +
    "\000\030\007\051\012\034\013\030\037\026\040\054\043" +
    "\014\045\033\072\006\073\041\074\031\075\024\001\002" +
    "\000\016\002\uffdd\005\uffdd\027\uffdd\051\uffdd\052\uffdd\055" +
    "\uffdd\001\002\000\072\002\uffbc\005\uffbc\006\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\041\uffbc\042\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\001\002\000\016" +
    "\002\uffda\005\uffda\027\uffda\051\uffda\052\uffda\055\uffda\001" +
    "\002\000\072\002\uffbf\005\uffbf\006\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\041\uffbf\042\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\054\uffbf\055\uffbf\001\002\000\030\007\051" +
    "\012\034\013\030\037\026\040\054\043\014\045\033\072" +
    "\006\073\041\074\031\075\024\001\002\000\024\007\051" +
    "\013\030\037\026\040\054\045\033\072\006\073\041\074" +
    "\031\075\024\001\002\000\072\002\uffbd\005\uffbd\006\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\041\uffbd\042" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\001\002" +
    "\000\016\002\uffd9\005\uffd9\027\uffd9\051\uffd9\052\uffd9\055" +
    "\uffd9\001\002\000\072\002\uffbb\005\uffbb\006\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\041\uffbb\042\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\001\002\000\024" +
    "\007\051\013\030\037\026\040\054\045\033\072\006\073" +
    "\041\074\031\075\024\001\002\000\006\004\ufffc\005\ufffc" +
    "\001\002\000\004\002\211\001\002\000\016\002\uffd8\005" +
    "\uffd8\027\uffd8\051\uffd8\052\uffd8\055\uffd8\001\002\000\016" +
    "\002\uffdc\005\uffdc\027\uffdc\051\uffdc\052\uffdc\055\uffdc\001" +
    "\002\000\072\002\uffc0\005\uffc0\006\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\041\uffc0\042\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\054\uffc0\055\uffc0\001\002\000\016\002\uffd2" +
    "\005\uffd2\027\uffd2\051\uffd2\052\uffd2\055\uffd2\001\002\000" +
    "\030\007\051\012\034\013\030\037\026\040\054\043\014" +
    "\045\033\072\006\073\041\074\031\075\024\001\002\000" +
    "\016\002\uffc9\005\uffc9\027\uffc9\051\uffc9\052\uffc9\055\uffc9" +
    "\001\002\000\010\002\uffff\005\205\027\uffff\001\002\000" +
    "\006\004\ufffa\005\ufffa\001\002\000\030\007\051\012\034" +
    "\013\030\037\026\040\054\043\014\045\033\072\006\073" +
    "\041\074\031\075\024\001\002\000\016\002\uffd4\005\uffd4" +
    "\027\uffd4\051\uffd4\052\uffd4\055\uffd4\001\002\000\030\007" +
    "\051\012\034\013\030\037\026\040\054\043\014\045\033" +
    "\072\006\073\041\074\031\075\024\001\002\000\004\075" +
    "\161\001\002\000\072\002\uffa9\005\uffa9\006\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\041\uffa9\042\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\054\uffa9\055\uffa9\001\002\000\072" +
    "\002\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\041\uffbe\042\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\054\uffbe\055\uffbe\001\002\000\072\002\uffab\005\uffab\006" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\041\uffab" +
    "\042\uffab\050\uffab\051\uffab\052\uffab\054\uffab\055\uffab\001" +
    "\002\000\006\004\ufffd\005\ufffd\001\002\000\072\002\uffaf" +
    "\005\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\154\025\uffaf\027\uffaf\030\152\031\153\032" +
    "\uffaf\041\uffaf\042\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf" +
    "\055\uffaf\001\002\000\064\002\uffb2\005\uffb2\006\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\027" +
    "\uffb2\032\uffb2\041\uffb2\042\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\054\uffb2\055\uffb2\001\002\000\064\002\uffb4\005\uffb4\006" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\111\014\114\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\113\025" +
    "\uffb4\027\uffb4\032\uffb4\041\uffb4\042\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\054\uffb4\055\uffb4\001\002\000\056\002\uffb6\005" +
    "\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6\015\101\016\102" +
    "\017\106\020\105\021\107\022\103\025\uffb6\027\uffb6\032" +
    "\uffb6\041\uffb6\042\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6" +
    "\055\uffb6\001\002\000\022\034\116\035\130\036\120\044" +
    "\125\057\124\060\122\062\131\075\127\001\002\000\042" +
    "\002\uffb8\005\uffb8\006\uffb8\010\uffb8\011\074\012\073\025" +
    "\uffb8\027\uffb8\032\uffb8\041\072\042\075\050\uffb8\051\uffb8" +
    "\052\uffb8\054\uffb8\055\uffb8\001\002\000\004\006\067\001" +
    "\002\000\006\004\ufffb\005\ufffb\001\002\000\030\007\051" +
    "\012\034\013\030\037\026\040\054\043\014\045\033\072" +
    "\006\073\041\074\031\075\024\001\002\000\016\002\uffd1" +
    "\005\uffd1\027\uffd1\051\uffd1\052\uffd1\055\uffd1\001\002\000" +
    "\030\007\051\012\034\013\030\037\026\040\054\043\014" +
    "\045\033\072\006\073\041\074\031\075\024\001\002\000" +
    "\030\007\uffa6\012\uffa6\013\uffa6\037\uffa6\040\uffa6\043\uffa6" +
    "\045\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\001\002\000" +
    "\030\007\051\012\034\013\030\037\026\040\054\043\014" +
    "\045\033\072\006\073\041\074\031\075\024\001\002\000" +
    "\030\007\051\012\034\013\030\037\026\040\054\043\014" +
    "\045\033\072\006\073\041\074\031\075\024\001\002\000" +
    "\030\007\uffa5\012\uffa5\013\uffa5\037\uffa5\040\uffa5\043\uffa5" +
    "\045\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\001\002\000" +
    "\032\002\uffba\005\uffba\006\uffba\010\uffba\025\uffba\027\uffba" +
    "\032\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055\uffba\001" +
    "\002\000\036\002\uffb9\005\uffb9\006\uffb9\010\uffb9\025\uffb9" +
    "\027\uffb9\032\uffb9\041\072\042\075\050\uffb9\051\uffb9\052" +
    "\uffb9\054\uffb9\055\uffb9\001\002\000\056\002\uffb7\005\uffb7" +
    "\006\uffb7\010\uffb7\011\uffb7\012\uffb7\015\101\016\102\017" +
    "\106\020\105\021\107\022\103\025\uffb7\027\uffb7\032\uffb7" +
    "\041\uffb7\042\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055" +
    "\uffb7\001\002\000\030\007\uffa4\012\uffa4\013\uffa4\037\uffa4" +
    "\040\uffa4\043\uffa4\045\uffa4\072\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\001\002\000\030\007\uffa2\012\uffa2\013\uffa2\037\uffa2" +
    "\040\uffa2\043\uffa2\045\uffa2\072\uffa2\073\uffa2\074\uffa2\075" +
    "\uffa2\001\002\000\030\007\uff9f\012\uff9f\013\uff9f\037\uff9f" +
    "\040\uff9f\043\uff9f\045\uff9f\072\uff9f\073\uff9f\074\uff9f\075" +
    "\uff9f\001\002\000\030\007\051\012\034\013\030\037\026" +
    "\040\054\043\014\045\033\072\006\073\041\074\031\075" +
    "\024\001\002\000\030\007\uffa1\012\uffa1\013\uffa1\037\uffa1" +
    "\040\uffa1\043\uffa1\045\uffa1\072\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\001\002\000\030\007\uffa3\012\uffa3\013\uffa3\037\uffa3" +
    "\040\uffa3\043\uffa3\045\uffa3\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\001\002\000\030\007\uffa0\012\uffa0\013\uffa0\037\uffa0" +
    "\040\uffa0\043\uffa0\045\uffa0\072\uffa0\073\uffa0\074\uffa0\075" +
    "\uffa0\001\002\000\064\002\uffb5\005\uffb5\006\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\111\014\114\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\113\025\uffb5\027\uffb5" +
    "\032\uffb5\041\uffb5\042\uffb5\050\uffb5\051\uffb5\052\uffb5\054" +
    "\uffb5\055\uffb5\001\002\000\030\007\uff9e\012\uff9e\013\uff9e" +
    "\037\uff9e\040\uff9e\043\uff9e\045\uff9e\072\uff9e\073\uff9e\074" +
    "\uff9e\075\uff9e\001\002\000\030\007\051\012\034\013\030" +
    "\037\026\040\054\043\014\045\033\072\006\073\041\074" +
    "\031\075\024\001\002\000\030\007\uff9c\012\uff9c\013\uff9c" +
    "\037\uff9c\040\uff9c\043\uff9c\045\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\001\002\000\030\007\uff9d\012\uff9d\013\uff9d" +
    "\037\uff9d\040\uff9d\043\uff9d\045\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\075\uff9d\001\002\000\064\002\uffb3\005\uffb3\006\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3" +
    "\027\uffb3\032\uffb3\041\uffb3\042\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\054\uffb3\055\uffb3\001\002\000\006\033\uffe8\075\uffe8" +
    "\001\002\000\004\075\151\001\002\000\006\033\uffe6\075" +
    "\uffe6\001\002\000\006\033\uffea\075\uffea\001\002\000\004" +
    "\024\144\001\002\000\006\033\uffed\075\uffed\001\002\000" +
    "\004\026\134\001\002\000\006\033\uffe5\075\uffe5\001\002" +
    "\000\006\033\uffe9\075\uffe9\001\002\000\006\033\uffec\075" +
    "\uffec\001\002\000\006\033\uffe7\075\uffe7\001\002\000\022" +
    "\034\116\035\130\036\120\044\125\057\124\060\122\062" +
    "\131\075\127\001\002\000\006\033\uffeb\075\uffeb\001\002" +
    "\000\006\033\uffdf\075\uffdf\001\002\000\022\034\116\035" +
    "\130\036\120\044\125\057\124\060\122\062\131\075\127" +
    "\001\002\000\004\075\143\001\002\000\006\005\141\027" +
    "\140\001\002\000\006\005\uffe1\027\uffe1\001\002\000\006" +
    "\033\uffe3\075\uffe3\001\002\000\022\034\116\035\130\036" +
    "\120\044\125\057\124\060\122\062\131\075\127\001\002" +
    "\000\006\005\uffe2\027\uffe2\001\002\000\006\005\uffe0\027" +
    "\uffe0\001\002\000\004\072\145\001\002\000\004\025\146" +
    "\001\002\000\004\061\147\001\002\000\022\034\116\035" +
    "\130\036\120\044\125\057\124\060\122\062\131\075\127" +
    "\001\002\000\006\033\uffe4\075\uffe4\001\002\000\006\004" +
    "\ufff9\005\ufff9\001\002\000\004\075\160\001\002\000\004" +
    "\075\157\001\002\000\030\007\051\012\034\013\030\037" +
    "\026\040\054\043\014\045\033\072\006\073\041\074\031" +
    "\075\024\001\002\000\004\025\156\001\002\000\072\002" +
    "\uffae\005\uffae\006\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae" +
    "\032\uffae\041\uffae\042\uffae\050\uffae\051\uffae\052\uffae\054" +
    "\uffae\055\uffae\001\002\000\072\002\uffac\005\uffac\006\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac\041\uffac\042" +
    "\uffac\050\uffac\051\uffac\052\uffac\054\uffac\055\uffac\001\002" +
    "\000\072\002\uffad\005\uffad\006\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\041\uffad\042\uffad\050\uffad\051\uffad" +
    "\052\uffad\054\uffad\055\uffad\001\002\000\004\007\162\001" +
    "\002\000\024\010\170\034\116\035\130\036\120\044\125" +
    "\057\124\060\122\062\131\075\127\001\002\000\004\026" +
    "\017\001\002\000\006\004\ufff7\005\ufff7\001\002\000\006" +
    "\033\175\075\174\001\002\000\006\010\ufff3\032\ufff3\001" +
    "\002\000\006\010\172\032\171\001\002\000\004\026\ufff6" +
    "\001\002\000\022\034\116\035\130\036\120\044\125\057" +
    "\124\060\122\062\131\075\127\001\002\000\004\026\ufff5" +
    "\001\002\000\006\010\ufff4\032\ufff4\001\002\000\006\010" +
    "\ufff2\032\ufff2\001\002\000\004\075\176\001\002\000\006" +
    "\010\ufff1\032\ufff1\001\002\000\004\010\200\001\002\000" +
    "\072\002\uffa8\005\uffa8\006\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\041\uffa8\042\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\054\uffa8\055\uffa8\001\002\000\004\054\202\001\002" +
    "\000\054\007\051\012\034\013\030\026\017\037\026\040" +
    "\054\043\014\045\033\047\022\053\047\055\uffcf\056\016" +
    "\063\027\064\012\065\043\066\013\067\044\072\006\073" +
    "\041\074\031\075\024\001\002\000\004\055\207\001\002" +
    "\000\012\005\205\051\uffd0\052\uffd0\055\uffd0\001\002\000" +
    "\052\007\051\012\034\013\030\026\017\037\026\040\054" +
    "\043\014\045\033\047\022\053\047\056\016\063\027\064" +
    "\012\065\043\066\013\067\044\072\006\073\041\074\031" +
    "\075\024\001\002\000\016\002\uffde\005\uffde\027\uffde\051" +
    "\uffde\052\uffde\055\uffde\001\002\000\016\002\uffcc\005\uffcc" +
    "\027\uffcc\051\uffcc\052\uffcc\055\uffcc\001\002\000\016\002" +
    "\uffcb\005\uffcb\027\uffcb\051\uffcb\052\uffcb\055\uffcb\001\002" +
    "\000\004\002\000\001\002\000\072\002\uffb1\005\uffb1\006" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\154\025\uffb1\027\uffb1\030\152\031\153\032\uffb1\041\uffb1" +
    "\042\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\055\uffb1\001" +
    "\002\000\072\002\uffaa\005\uffaa\006\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\041\uffaa\042\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\054\uffaa\055\uffaa\001\002\000\016\002\uffc8" +
    "\005\uffc8\027\uffc8\051\uffc8\052\uffc8\055\uffc8\001\002\000" +
    "\004\050\216\001\002\000\056\007\051\012\034\013\030" +
    "\026\017\037\026\040\054\043\014\045\033\047\022\051" +
    "\uffcf\052\uffcf\053\047\056\016\063\027\064\012\065\043" +
    "\066\013\067\044\072\006\073\041\074\031\075\024\001" +
    "\002\000\006\051\220\052\221\001\002\000\054\007\051" +
    "\012\034\013\030\026\017\037\026\040\054\043\014\045" +
    "\033\047\022\052\uffcf\053\047\056\016\063\027\064\012" +
    "\065\043\066\013\067\044\072\006\073\041\074\031\075" +
    "\024\001\002\000\016\002\uffce\005\uffce\027\uffce\051\uffce" +
    "\052\uffce\055\uffce\001\002\000\004\052\223\001\002\000" +
    "\016\002\uffcd\005\uffcd\027\uffcd\051\uffcd\052\uffcd\055\uffcd" +
    "\001\002\000\004\027\226\001\002\000\004\027\uffef\001" +
    "\002\000\020\002\ufff0\004\ufff0\005\ufff0\027\ufff0\051\ufff0" +
    "\052\ufff0\055\ufff0\001\002\000\004\007\230\001\002\000" +
    "\032\007\051\010\234\012\034\013\030\037\026\040\054" +
    "\043\014\045\033\072\006\073\041\074\031\075\024\001" +
    "\002\000\016\002\uffc6\005\uffc6\027\uffc6\051\uffc6\052\uffc6" +
    "\055\uffc6\001\002\000\006\010\uffc2\032\uffc2\001\002\000" +
    "\006\010\236\032\235\001\002\000\016\002\uffc5\005\uffc5" +
    "\027\uffc5\051\uffc5\052\uffc5\055\uffc5\001\002\000\030\007" +
    "\051\012\034\013\030\037\026\040\054\043\014\045\033" +
    "\072\006\073\041\074\031\075\024\001\002\000\016\002" +
    "\uffc4\005\uffc4\027\uffc4\051\uffc4\052\uffc4\055\uffc4\001\002" +
    "\000\006\010\uffc3\032\uffc3\001\002\000\004\075\241\001" +
    "\002\000\006\004\ufff8\005\ufff8\001\002\000\064\002\uffb0" +
    "\005\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\025\uffb0\027\uffb0\032\uffb0\041\uffb0\042\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0\001\002\000\016" +
    "\002\uffca\005\uffca\027\uffca\051\uffca\052\uffca\055\uffca\001" +
    "\002\000\016\002\uffc7\005\uffc7\027\uffc7\051\uffc7\052\uffc7" +
    "\055\uffc7\001\002\000\052\007\051\012\034\013\030\026" +
    "\017\037\026\040\054\043\014\045\033\047\022\053\047" +
    "\056\016\063\027\064\012\065\043\066\013\067\044\072" +
    "\006\073\041\074\031\075\024\001\002\000\010\046\052" +
    "\070\063\071\015\001\002\000\006\004\ufffe\005\ufffe\001" +
    "\002\000\010\002\001\005\205\027\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\072\002\035\003\010\004\055\005\034\006" +
    "\065\007\045\013\041\024\044\025\022\026\037\030\004" +
    "\031\024\032\031\033\036\034\007\035\020\036\003\037" +
    "\047\040\006\043\017\044\064\045\063\046\061\047\060" +
    "\050\057\051\056\052\054\053\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\043\017\044" +
    "\243\045\063\046\061\047\060\050\057\051\056\052\054" +
    "\053\052\001\001\000\024\043\017\044\242\045\063\046" +
    "\061\047\060\050\057\051\056\052\054\053\052\001\001" +
    "\000\014\043\017\050\241\051\056\052\054\053\052\001" +
    "\001\000\014\015\237\016\122\017\131\020\120\023\125" +
    "\001\001\000\002\001\001\000\074\002\224\003\010\004" +
    "\055\005\034\006\065\007\045\013\041\014\223\024\044" +
    "\025\022\026\037\030\004\031\024\032\031\033\036\034" +
    "\007\035\020\036\003\037\047\040\006\043\017\044\064" +
    "\045\063\046\061\047\060\050\057\051\056\052\054\053" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\043\017\044\214\045\063\046\061\047\060\050\057\051" +
    "\056\052\054\053\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\043" +
    "\017\044\213\045\063\046\061\047\060\050\057\051\056" +
    "\052\054\053\052\001\001\000\010\043\017\052\212\053" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\043\017\051\211\052\054\053\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\043\017\044\207\045\063\046\061\047\060\050\057" +
    "\051\056\052\054\053\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\043\017\044\200" +
    "\045\063\046\061\047\060\050\057\051\056\052\054\053" +
    "\052\001\001\000\002\001\001\000\024\043\017\044\176" +
    "\045\063\046\061\047\060\050\057\051\056\052\054\053" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\111\001\001\000\004" +
    "\055\103\001\001\000\014\015\116\016\122\017\131\020" +
    "\120\023\125\001\001\000\004\054\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\043\017\044\067\045" +
    "\063\046\061\047\060\050\057\051\056\052\054\053\052" +
    "\001\001\000\002\001\001\000\020\043\017\046\077\047" +
    "\060\050\057\051\056\052\054\053\052\001\001\000\002" +
    "\001\001\000\022\043\017\045\076\046\061\047\060\050" +
    "\057\051\056\052\054\053\052\001\001\000\024\043\017" +
    "\044\075\045\063\046\061\047\060\050\057\051\056\052" +
    "\054\053\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\070\001\001\000\004\055\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\043\017\047\107\050\057\051\056\052\054\053\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\111\001\001\000\002\001\001\000\014\043" +
    "\017\050\114\051\056\052\054\053\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\132\016\122\017\131\020\120\023" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\134\016\122\017\131\020\120\021\135\022\136\023" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\134\016\122\017" +
    "\131\020\120\022\141\023\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\147\016\122\017\131\020\120" +
    "\023\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\043\017\044\154" +
    "\045\063\046\061\047\060\050\057\051\056\052\054\053" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\162\001\001\000" +
    "\020\011\166\012\165\015\164\016\122\017\131\020\120" +
    "\023\125\001\001\000\004\013\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\172\015\164\016\122\017" +
    "\131\020\120\023\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\013\041\024\203\025\022\026\037\027\202\030" +
    "\004\031\024\032\031\033\036\034\007\035\020\036\003" +
    "\037\047\040\006\043\017\044\064\045\063\046\061\047" +
    "\060\050\057\051\056\052\054\053\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\013\041\025\205\026" +
    "\037\030\004\031\024\032\031\033\036\034\007\035\020" +
    "\036\003\037\047\040\006\043\017\044\064\045\063\046" +
    "\061\047\060\050\057\051\056\052\054\053\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\013\041\024\203\025" +
    "\022\026\037\027\216\030\004\031\024\032\031\033\036" +
    "\034\007\035\020\036\003\037\047\040\006\043\017\044" +
    "\064\045\063\046\061\047\060\050\057\051\056\052\054" +
    "\053\052\001\001\000\002\001\001\000\060\013\041\024" +
    "\203\025\022\026\037\027\221\030\004\031\024\032\031" +
    "\033\036\034\007\035\020\036\003\037\047\040\006\043" +
    "\017\044\064\045\063\046\061\047\060\050\057\051\056" +
    "\052\054\053\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\230\001\001\000\026\042" +
    "\232\043\017\044\231\045\063\046\061\047\060\050\057" +
    "\051\056\052\054\053\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\043\017\044\236\045\063\046\061\047\060\050\057\051" +
    "\056\052\054\053\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\013\041" +
    "\024\247\025\022\026\037\030\004\031\024\032\031\033" +
    "\036\034\007\035\020\036\003\037\047\040\006\043\017" +
    "\044\064\045\063\046\061\047\060\050\057\051\056\052" +
    "\054\053\052\001\001\000\012\004\246\005\034\006\065" +
    "\007\045\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCUP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCUP$actions {


   private SemOps sem = new SemOps();

  private final AnalizadorSintacticoCUP parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCUP$actions(AnalizadorSintacticoCUP parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCUP$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoCUP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCUP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCUP$stack,
    int                        CUP$AnalizadorSintacticoCUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCUP$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones SEP_SEC Instrucciones 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Instrs insts = (Instrs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.prog_con_decs(decs, insts); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCUP$parser.done_parsing();
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrucciones 
            {
              Prog RESULT =null;
		Instrs insts = (Instrs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.prog_sin_decs(insts); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaraciones SEP_INS Declaracion 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.decs_muchas(decs,dec); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= DeclaracionVar 
            {
              Dec RESULT =null;
		DecVar dec_var = (DecVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = dec_var; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= DeclaracionTipo 
            {
              Dec RESULT =null;
		DecTipo dec_tipo = (DecTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = dec_tipo; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= DeclaracionProc 
            {
              Dec RESULT =null;
		DecProc dec_proc = (DecProc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = dec_proc; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionVar ::= VAR Tipo ID 
            {
              DecVar RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.dec_var(tipo, id); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",3, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionTipo ::= TYPE Tipo ID 
            {
              DecTipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.dec_tipo(tipo, id); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("DeclaracionTipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionProc ::= PROC ID ParametrosFormales Bloque 
            {
              DecProc RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		ParamsF params_f = (ParamsF)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.dec_proc(id, params_f, bloque); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("DeclaracionProc",5, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParametrosFormales ::= P_AP P_CIERRE 
            {
              ParamsF RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",6, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ParametrosFormales ::= P_AP Parametros P_CIERRE 
            {
              ParamsF RESULT =null;
		Params params = (Params)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = params; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",6, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parametros ::= Parametros COMA Parametro 
            {
              Params RESULT =null;
		Params params = (Params)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.params_muchos_f(params, param); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Parametros",7, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parametros ::= Parametro 
            {
              Params RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.params_uno_f(param); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Parametros",7, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parametro ::= Tipo ID 
            {
              Param RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.param_f_sin_amp(tipo, id); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Parametro",8, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parametro ::= Tipo OP_AMP ID 
            {
              Param RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.param_f_con_amp(tipo, id); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Parametro",8, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bloque ::= LLAVE_AP ProgramaAux LLAVE_CIERRE 
            {
              Bloque RESULT =null;
		ProgramaAux prog = (ProgramaAux)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = prog; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Bloque",9, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ProgramaAux ::= Programa 
            {
              ProgramaAux RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.bloque_lleno(prog); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("ProgramaAux",10, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ProgramaAux ::= 
            {
              ProgramaAux RESULT =null;
		 RESULT = sem.bloque_vacio(); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("ProgramaAux",10, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= TipoBasico 
            {
              Tipo RESULT =null;
		TipoBasico tipo_basico = (TipoBasico)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = tipo_basico; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= ID 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.tipo_id(id); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= TipoArray 
            {
              Tipo RESULT =null;
		TipoArray tipo_array = (TipoArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = tipo_array; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= TipoRegistro 
            {
              Tipo RESULT =null;
		TipoRegistro tipo_registro = (TipoRegistro)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = tipo_registro; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= TipoPuntero 
            {
              Tipo RESULT =null;
		TipoPuntero tipo_puntero = (TipoPuntero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = tipo_puntero; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TipoBasico ::= INT 
            {
              TipoBasico RESULT =null;
		Object int = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.tipo_basico(int.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("TipoBasico",12, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TipoBasico ::= REAL 
            {
              TipoBasico RESULT =null;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.tipo_basico(real.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("TipoBasico",12, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TipoBasico ::= BOOL 
            {
              TipoBasico RESULT =null;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.tipo_basico(bool.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("TipoBasico",12, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TipoBasico ::= STRING 
            {
              TipoBasico RESULT =null;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.tipo_basico(string.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("TipoBasico",12, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TipoArray ::= ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo 
            {
              TipoArray RESULT =null;
		StringLocalizado num_int = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.tipo_array(num_int, tipo); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("TipoArray",13, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TipoRegistro ::= RECORD LLAVE_AP Campos LLAVE_CIERRE 
            {
              TipoRegistro RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = sem.tipo_registro(campos); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("TipoRegistro",14, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Campos ::= Campos SEP_INS Campo 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.campos_muchos(campos, campo); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Campos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Campos ::= Campo 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.campos_uno(campo); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Campos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Campo ::= Tipo ID 
            {
              Campo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.campo(tipo, id); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Campo",16, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TipoPuntero ::= POINTER Tipo 
            {
              TipoPuntero RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.tipo_puntero(tipo); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("TipoPuntero",17, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instrucciones ::= Instrucciones SEP_INS Instruccion 
            {
              Instrs RESULT =null;
		Instrs insts = (Instrs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.insts_muchas(insts, inst); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instrucciones",18, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instrucciones ::= Instruccion 
            {
              Instrs RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.insts_una(inst); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instrucciones",18, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= InstrAsig 
            {
              Inst RESULT =null;
		InstrAsig asig = (InstrAsig)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = asig; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InstrIfThen 
            {
              Inst RESULT =null;
		InstrIfThen if_then = (InstrIfThen)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = if_then; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= InstrIfThenElse 
            {
              Inst RESULT =null;
		InstrIfThenElse if_then_else = (InstrIfThenElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = if_then_else; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= InstrWhile 
            {
              Inst RESULT =null;
		InstrWhile while = (InstrWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = while; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= InstrLectura 
            {
              Inst RESULT =null;
		InstrLectura lectura = (InstrLectura)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = lectura; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion ::= InstrEscritura 
            {
              Inst RESULT =null;
		InstrEscritura escritura = (InstrEscritura)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = escritura; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion ::= InstrNewLine 
            {
              Inst RESULT =null;
		InstrNewLine new_line = (InstrNewLine)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = new_line; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion ::= InstrReservMem 
            {
              Inst RESULT =null;
		InstrReservMem reserv_mem = (InstrReservMem)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = reserv_mem; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruccion ::= InstrLibMem 
            {
              Inst RESULT =null;
		InstrLibMem lib_mem = (InstrLibMem)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = lib_mem; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruccion ::= InstrInvocProc 
            {
              Inst RESULT =null;
		InstrInvocProc invoc_proc = (InstrInvocProc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = invoc_proc; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruccion ::= Bloque 
            {
              Inst RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = bloque; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InstrAsig ::= E0 ASIG E0 
            {
              InstrAsig RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.inst_asig(arg0, arg1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrAsig",20, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BloqOpc ::= Instrucciones 
            {
              BloqOpc RESULT =null;
		Instrs insts = (Instrs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = insts_opc_con_insts(insts); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("BloqOpc",21, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BloqOpc ::= 
            {
              BloqOpc RESULT =null;
		 RESULT = insts_opc_sin_insts(); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("BloqOpc",21, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InstrIfThen ::= IF E0 THEN BloqOpc ENDIF 
            {
              InstrIfThen RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-3)).value;
		BloqOpc bloque_opc = (BloqOpc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = sem.inst_ifthen(arg0, bloque_opc); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrIfThen",22, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InstrIfThenElse ::= IF E0 THEN BloqOpc ELSE BloqOpc ENDIF 
            {
              InstrIfThenElse RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-5)).value;
		BloqOpc bloque_opc_0 = (BloqOpc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-3)).value;
		BloqOpc bloque_opc_1 = (BloqOpc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = sem.inst_ifthenelse(arg0, bloque_opc_0, bloque_opc_1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrIfThenElse",23, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstrWhile ::= WHILE E0 DO BloqOpc ENDWHILE 
            {
              InstrWhile RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-3)).value;
		BloqOpc bloque_opc = (BloqOpc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = sem.inst_while(arg0, bloque_opc); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrWhile",24, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InstrLectura ::= READ E0 
            {
              InstrLectura RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.inst_lectura(arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrLectura",25, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InstrEscritura ::= WRITE E0 
            {
              InstrEscritura RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.inst_escritura(arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrEscritura",26, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InstrNewLine ::= NL 
            {
              InstrNewLine RESULT =null;
		 RESULT = sem.inst_new_line(); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrNewLine",27, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InstrReservMem ::= NEW E0 
            {
              InstrReservMem RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.inst_reserv_mem(arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrReservMem",28, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InstrLibMem ::= DELETE E0 
            {
              InstrLibMem RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.inst_lib_mem(arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrLibMem",29, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InstrInvocProc ::= CALL ID ParamsR 
            {
              InstrInvocProc RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		ParamsR params_r = (ParamsR)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.inst_invoc_proc(id, params_r); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("InstrInvocProc",30, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ParamsR ::= P_AP P_CIERRE 
            {
              ParamsR RESULT =null;
		 RESULT = sem.params_vacio(); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("ParamsR",31, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ParamsR ::= P_AP Exprs P_CIERRE 
            {
              ParamsR RESULT =null;
		Exprs exprs = (Exprs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = sem.params_lleno(exprs); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("ParamsR",31, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exprs ::= Exprs COMA E0 
            {
              Exprs RESULT =null;
		Exprs exprs = (Exprs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exprs_muchas(exprs, arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Exprs",32, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exprs ::= E0 
            {
              Exprs RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exprs_una(arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("Exprs",32, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EBasica ::= NUM_INT 
            {
              EBasica RESULT =null;
		StringLocalizado num_int = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.num_int(num_int.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("EBasica",33, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EBasica ::= NUM_REAL 
            {
              EBasica RESULT =null;
		StringLocalizado num_real = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.num_real(num_real.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("EBasica",33, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EBasica ::= TRUE 
            {
              EBasica RESULT =null;
		 RESULT = sem.true(); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("EBasica",33, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EBasica ::= FALSE 
            {
              EBasica RESULT =null;
		 RESULT = sem.false(); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("EBasica",33, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EBasica ::= CADENA 
            {
              EBasica RESULT =null;
		StringLocalizado cadena = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.string(cadena.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("EBasica",33, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EBasica ::= ID 
            {
              EBasica RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.id(id.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("EBasica",33, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EBasica ::= NULL 
            {
              EBasica RESULT =null;
		 RESULT = sem.null(); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("EBasica",33, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E0 ::= E1 OP_SUMA E0 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp("+", arg0, arg1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E0",34, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E0 ::= E1 OP_RESTA E1 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp("-", arg0, arg1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E0",34, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E0",34, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp(OP1.lexema(), arg0, arg1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E1",35, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E1",35, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E2 ::= E2 OP2 E3 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp(OP2.lexema(), arg0, arg1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E2",36, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E2",36, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E3 ::= E3 OP3 E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp(OP3.lexema(), arg0, arg1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E3",37, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E3",37, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E4 ::= OP_RESTA E5 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp("-", arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp("not", arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E5 ::= E5 CORCHETE_AP E0 CORCHETE_CIERRE 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-3)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = sem.exp("[]", arg0, arg1); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= E5 PUNTO ID 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp(".", arg0, id.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E5 ::= E5 OP_FLECHA ID 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp("->", arg0, id.lexema()); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E6 ::= OP_MULT E6 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = sem.exp("*", arg0); 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E7 ::= P_AP E0 P_CIERRE 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.elementAt(CUP$AnalizadorSintacticoCUP$top-1)).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E7 ::= EBasica 
            {
              Exp RESULT =null;
		EBasica arg0 = (EBasica)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCUP$stack.peek()).value;
		 RESULT = arg0; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP1 ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP1",42, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP1 ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP1",42, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP2 ::= OP_MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP2 ::= OP_MEN_IG 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP2 ::= OP_MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP2 ::= OP_MAY_IG 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP2 ::= OP_COMP 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP2 ::= OP_DIST 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP3 ::= OP_MULT 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP3",44, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP3 ::= OP_DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP3",44, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP3 ::= OP_100 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$AnalizadorSintacticoCUP$result = parser.getSymbolFactory().newSymbol("OP3",44, RESULT);
            }
          return CUP$AnalizadorSintacticoCUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoCUP$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCUP$do_action(
    int                        CUP$AnalizadorSintacticoCUP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCUP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCUP$stack,
    int                        CUP$AnalizadorSintacticoCUP$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoCUP$do_action_part00000000(
                               CUP$AnalizadorSintacticoCUP$act_num,
                               CUP$AnalizadorSintacticoCUP$parser,
                               CUP$AnalizadorSintacticoCUP$stack,
                               CUP$AnalizadorSintacticoCUP$top);
    }
}

