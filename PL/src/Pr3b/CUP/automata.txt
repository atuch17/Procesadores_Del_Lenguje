===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [E5 ::= (*) E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) CADENA , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrInvocProc ::= (*) CALL ID ParamsR , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrLectura , {EOF SEP_INS }]
  [Declaracion ::= (*) DeclaracionVar , {SEP_SEC SEP_INS }]
  [E4 ::= (*) E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 , {ASIG }]
  [EBasica ::= (*) NUM_INT , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrEscritura ::= (*) WRITE E0 , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrInvocProc , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrAsig , {EOF SEP_INS }]
  [DeclaracionProc ::= (*) PROC ID ParametrosFormales Bloque , {SEP_SEC SEP_INS }]
  [$START ::= (*) Programa EOF , {EOF }]
  [E6 ::= (*) OP_MULT E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E3 OP3 E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThen ::= (*) IF E0 THEN BloqOpc ENDIF , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrEscritura , {EOF SEP_INS }]
  [Declaracion ::= (*) DeclaracionTipo , {SEP_SEC SEP_INS }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) NUM_REAL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrNewLine ::= (*) NL , {EOF SEP_INS }]
  [Instruccion ::= (*) Bloque , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrIfThen , {EOF SEP_INS }]
  [Programa ::= (*) Instrucciones , {EOF }]
  [E6 ::= (*) E7 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) NULL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= (*) IF E0 THEN BloqOpc ELSE BloqOpc ENDIF , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrNewLine , {EOF SEP_INS }]
  [Declaracion ::= (*) DeclaracionProc , {SEP_SEC SEP_INS }]
  [E5 ::= (*) E5 PUNTO ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) TRUE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrReservMem ::= (*) NEW E0 , {EOF SEP_INS }]
  [InstrAsig ::= (*) E0 ASIG E0 , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrIfThenElse , {EOF SEP_INS }]
  [Declaraciones ::= (*) Declaraciones SEP_INS Declaracion , {SEP_SEC SEP_INS }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {ASIG }]
  [InstrWhile ::= (*) WHILE E0 DO BloqOpc ENDWHILE , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrReservMem , {EOF SEP_INS }]
  [Instrucciones ::= (*) Instrucciones SEP_INS Instruccion , {EOF SEP_INS }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {EOF SEP_INS }]
  [DeclaracionVar ::= (*) VAR Tipo ID , {SEP_SEC SEP_INS }]
  [E5 ::= (*) E5 OP_FLECHA ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E2 OP2 E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) FALSE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrLibMem ::= (*) DELETE E0 , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrWhile , {EOF SEP_INS }]
  [Declaraciones ::= (*) Declaracion , {SEP_SEC SEP_INS }]
  [E7 ::= (*) EBasica , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) NOT E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {ASIG }]
  [InstrLectura ::= (*) READ E0 , {EOF SEP_INS }]
  [Instruccion ::= (*) InstrLibMem , {EOF SEP_INS }]
  [Instrucciones ::= (*) Instruccion , {EOF SEP_INS }]
  [DeclaracionTipo ::= (*) TYPE Tipo ID , {SEP_SEC SEP_INS }]
  [Programa ::= (*) Declaraciones SEP_SEC Instrucciones , {EOF }]
}
transition on DeclaracionTipo to state [51]
transition on E0 to state [50]
transition on E1 to state [49]
transition on VAR to state [48]
transition on E2 to state [47]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on Declaracion to state [43]
transition on E6 to state [42]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on PROC to state [39]
transition on P_AP to state [38]
transition on InstrLibMem to state [37]
transition on WHILE to state [36]
transition on DeclaracionProc to state [35]
transition on Instrucciones to state [34]
transition on NL to state [33]
transition on READ to state [32]
transition on Bloque to state [31]
transition on NUM_REAL to state [30]
transition on InstrAsig to state [29]
transition on InstrLectura to state [28]
transition on Programa to state [27]
transition on DeclaracionVar to state [26]
transition on OP_RESTA to state [25]
transition on NULL to state [24]
transition on InstrWhile to state [23]
transition on CADENA to state [22]
transition on OP_MULT to state [21]
transition on NEW to state [20]
transition on TRUE to state [19]
transition on InstrIfThenElse to state [18]
transition on ID to state [17]
transition on Instruccion to state [16]
transition on IF to state [15]
transition on InstrNewLine to state [14]
transition on EBasica to state [13]
transition on LLAVE_AP to state [12]
transition on CALL to state [11]
transition on TYPE to state [10]
transition on NOT to state [9]
transition on WRITE to state [8]
transition on DELETE to state [7]
transition on Declaraciones to state [6]
transition on InstrEscritura to state [5]
transition on InstrInvocProc to state [4]
transition on NUM_INT to state [3]
transition on InstrIfThen to state [2]
transition on InstrReservMem to state [1]

-------------------
lalr_state [1]: {
  [Instruccion ::= InstrReservMem (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [2]: {
  [Instruccion ::= InstrIfThen (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [3]: {
  [EBasica ::= NUM_INT (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [4]: {
  [Instruccion ::= InstrInvocProc (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [5]: {
  [Instruccion ::= InstrEscritura (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [6]: {
  [Declaraciones ::= Declaraciones (*) SEP_INS Declaracion , {SEP_SEC SEP_INS }]
  [Programa ::= Declaraciones (*) SEP_SEC Instrucciones , {EOF LLAVE_CIERRE }]
}
transition on SEP_INS to state [163]
transition on SEP_SEC to state [162]

-------------------
lalr_state [7]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_RESTA E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [InstrLibMem ::= DELETE (*) E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_SUMA E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E1 OP1 E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [161]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [8]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_RESTA E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [InstrEscritura ::= WRITE (*) E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_SUMA E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E1 OP1 E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [160]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [9]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= NOT (*) E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NUM_INT to state [3]
transition on NOT to state [9]
transition on E4 to state [159]
transition on E5 to state [44]
transition on P_AP to state [38]
transition on E6 to state [42]
transition on ID to state [17]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on EBasica to state [13]
transition on NULL to state [24]
transition on OP_MULT to state [21]
transition on TRUE to state [19]
transition on OP_RESTA to state [25]
transition on NUM_REAL to state [30]
transition on CADENA to state [22]

-------------------
lalr_state [10]: {
  [Tipo ::= (*) TipoBasico , {ID }]
  [TipoPuntero ::= (*) POINTER Tipo , {ID }]
  [TipoBasico ::= (*) STRING , {ID }]
  [TipoBasico ::= (*) INT , {ID }]
  [Tipo ::= (*) TipoArray , {ID }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {ID }]
  [TipoBasico ::= (*) BOOL , {ID }]
  [Tipo ::= (*) TipoPuntero , {ID }]
  [Tipo ::= (*) ID , {ID }]
  [DeclaracionTipo ::= TYPE (*) Tipo ID , {SEP_SEC SEP_INS }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {ID }]
  [TipoBasico ::= (*) REAL , {ID }]
  [Tipo ::= (*) TipoRegistro , {ID }]
}
transition on TipoArray to state [87]
transition on POINTER to state [86]
transition on REAL to state [85]
transition on ID to state [84]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [157]
transition on INT to state [75]

-------------------
lalr_state [11]: {
  [InstrInvocProc ::= CALL (*) ID ParamsR , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on ID to state [148]

-------------------
lalr_state [12]: {
  [E5 ::= (*) E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) CADENA , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrInvocProc ::= (*) CALL ID ParamsR , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrLectura , {SEP_INS LLAVE_CIERRE }]
  [Declaracion ::= (*) DeclaracionVar , {SEP_SEC SEP_INS }]
  [E4 ::= (*) E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 , {ASIG }]
  [EBasica ::= (*) NUM_INT , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrEscritura ::= (*) WRITE E0 , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrInvocProc , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrAsig , {SEP_INS LLAVE_CIERRE }]
  [ProgramaAux ::= (*) , {LLAVE_CIERRE }]
  [DeclaracionProc ::= (*) PROC ID ParametrosFormales Bloque , {SEP_SEC SEP_INS }]
  [E6 ::= (*) OP_MULT E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E3 OP3 E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThen ::= (*) IF E0 THEN BloqOpc ENDIF , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrEscritura , {SEP_INS LLAVE_CIERRE }]
  [Declaracion ::= (*) DeclaracionTipo , {SEP_SEC SEP_INS }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) NUM_REAL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrNewLine ::= (*) NL , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) Bloque , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrIfThen , {SEP_INS LLAVE_CIERRE }]
  [Programa ::= (*) Instrucciones , {LLAVE_CIERRE }]
  [E6 ::= (*) E7 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) NULL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= (*) IF E0 THEN BloqOpc ELSE BloqOpc ENDIF , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrNewLine , {SEP_INS LLAVE_CIERRE }]
  [Declaracion ::= (*) DeclaracionProc , {SEP_SEC SEP_INS }]
  [E5 ::= (*) E5 PUNTO ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) TRUE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrReservMem ::= (*) NEW E0 , {SEP_INS LLAVE_CIERRE }]
  [InstrAsig ::= (*) E0 ASIG E0 , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrIfThenElse , {SEP_INS LLAVE_CIERRE }]
  [Declaraciones ::= (*) Declaraciones SEP_INS Declaracion , {SEP_SEC SEP_INS }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {ASIG }]
  [InstrWhile ::= (*) WHILE E0 DO BloqOpc ENDWHILE , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrReservMem , {SEP_INS LLAVE_CIERRE }]
  [Instrucciones ::= (*) Instrucciones SEP_INS Instruccion , {SEP_INS LLAVE_CIERRE }]
  [Bloque ::= LLAVE_AP (*) ProgramaAux LLAVE_CIERRE , {EOF SEP_SEC SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {SEP_INS LLAVE_CIERRE }]
  [DeclaracionVar ::= (*) VAR Tipo ID , {SEP_SEC SEP_INS }]
  [E5 ::= (*) E5 OP_FLECHA ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E2 OP2 E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) FALSE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrLibMem ::= (*) DELETE E0 , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrWhile , {SEP_INS LLAVE_CIERRE }]
  [Declaraciones ::= (*) Declaracion , {SEP_SEC SEP_INS }]
  [E7 ::= (*) EBasica , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) NOT E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {ASIG }]
  [InstrLectura ::= (*) READ E0 , {SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrLibMem , {SEP_INS LLAVE_CIERRE }]
  [Instrucciones ::= (*) Instruccion , {SEP_INS LLAVE_CIERRE }]
  [ProgramaAux ::= (*) Programa , {LLAVE_CIERRE }]
  [DeclaracionTipo ::= (*) TYPE Tipo ID , {SEP_SEC SEP_INS }]
  [Programa ::= (*) Declaraciones SEP_SEC Instrucciones , {LLAVE_CIERRE }]
}
transition on DeclaracionTipo to state [51]
transition on E0 to state [50]
transition on E1 to state [49]
transition on VAR to state [48]
transition on E2 to state [47]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on Declaracion to state [43]
transition on E6 to state [42]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on PROC to state [39]
transition on P_AP to state [38]
transition on InstrLibMem to state [37]
transition on WHILE to state [36]
transition on DeclaracionProc to state [35]
transition on Instrucciones to state [34]
transition on NL to state [33]
transition on READ to state [32]
transition on Bloque to state [31]
transition on NUM_REAL to state [30]
transition on InstrAsig to state [29]
transition on InstrLectura to state [28]
transition on DeclaracionVar to state [26]
transition on Programa to state [146]
transition on OP_RESTA to state [25]
transition on NULL to state [24]
transition on InstrWhile to state [23]
transition on CADENA to state [22]
transition on OP_MULT to state [21]
transition on NEW to state [20]
transition on TRUE to state [19]
transition on InstrIfThenElse to state [18]
transition on ID to state [17]
transition on Instruccion to state [16]
transition on IF to state [15]
transition on InstrNewLine to state [14]
transition on EBasica to state [13]
transition on LLAVE_AP to state [12]
transition on CALL to state [11]
transition on TYPE to state [10]
transition on ProgramaAux to state [145]
transition on NOT to state [9]
transition on WRITE to state [8]
transition on DELETE to state [7]
transition on Declaraciones to state [6]
transition on InstrInvocProc to state [4]
transition on InstrEscritura to state [5]
transition on NUM_INT to state [3]
transition on InstrIfThen to state [2]
transition on InstrReservMem to state [1]

-------------------
lalr_state [13]: {
  [E7 ::= EBasica (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [14]: {
  [Instruccion ::= InstrNewLine (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [15]: {
  [EBasica ::= (*) FALSE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E0 ::= (*) E1 OP_RESTA E1 , {THEN }]
  [E2 ::= (*) E3 , {OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR THEN }]
  [E4 ::= (*) E5 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR THEN }]
  [E6 ::= (*) OP_MULT E6 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [EBasica ::= (*) NUM_REAL , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [EBasica ::= (*) NULL , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E1 ::= (*) E2 , {OP_SUMA OP_RESTA AND OR THEN }]
  [E4 ::= (*) OP_RESTA E5 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR THEN }]
  [E5 ::= (*) E5 OP_FLECHA ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E7 ::= (*) EBasica , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [EBasica ::= (*) CADENA , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E0 ::= (*) E1 , {THEN }]
  [E3 ::= (*) E3 OP3 E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR THEN }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E6 ::= (*) E7 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [InstrIfThen ::= IF (*) E0 THEN BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) TRUE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E0 ::= (*) E1 OP_SUMA E0 , {THEN }]
  [E2 ::= (*) E2 OP2 E3 , {OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR THEN }]
  [E4 ::= (*) NOT E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR THEN }]
  [E5 ::= (*) E6 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [EBasica ::= (*) NUM_INT , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [EBasica ::= (*) ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E1 ::= (*) E1 OP1 E2 , {OP_SUMA OP_RESTA AND OR THEN }]
  [E3 ::= (*) E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR THEN }]
  [E5 ::= (*) E5 PUNTO ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR THEN }]
  [InstrIfThenElse ::= IF (*) E0 THEN BloqOpc ELSE BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [138]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [16]: {
  [Instrucciones ::= Instruccion (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [17]: {
  [EBasica ::= ID (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [18]: {
  [Instruccion ::= InstrIfThenElse (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [19]: {
  [EBasica ::= TRUE (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [20]: {
  [InstrReservMem ::= NEW (*) E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) FALSE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_RESTA E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_SUMA E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E1 OP1 E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [137]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [21]: {
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= OP_MULT (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NUM_INT to state [3]
transition on P_AP to state [38]
transition on E6 to state [136]
transition on ID to state [17]
transition on E7 to state [40]
transition on FALSE to state [41]
transition on NULL to state [24]
transition on EBasica to state [13]
transition on TRUE to state [19]
transition on OP_MULT to state [21]
transition on NUM_REAL to state [30]
transition on CADENA to state [22]

-------------------
lalr_state [22]: {
  [EBasica ::= CADENA (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [23]: {
  [Instruccion ::= InstrWhile (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [24]: {
  [EBasica ::= NULL (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [25]: {
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= OP_RESTA (*) E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NUM_INT to state [3]
transition on P_AP to state [38]
transition on E5 to state [135]
transition on E6 to state [42]
transition on ID to state [17]
transition on E7 to state [40]
transition on FALSE to state [41]
transition on NULL to state [24]
transition on EBasica to state [13]
transition on TRUE to state [19]
transition on OP_MULT to state [21]
transition on NUM_REAL to state [30]
transition on CADENA to state [22]

-------------------
lalr_state [26]: {
  [Declaracion ::= DeclaracionVar (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [27]: {
  [$START ::= Programa (*) EOF , {EOF }]
}
transition on EOF to state [134]

-------------------
lalr_state [28]: {
  [Instruccion ::= InstrLectura (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [29]: {
  [Instruccion ::= InstrAsig (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [30]: {
  [EBasica ::= NUM_REAL (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [31]: {
  [Instruccion ::= Bloque (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [32]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_RESTA E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_SUMA E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [InstrLectura ::= READ (*) E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E1 OP1 E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [133]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [33]: {
  [InstrNewLine ::= NL (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [34]: {
  [Instrucciones ::= Instrucciones (*) SEP_INS Instruccion , {EOF SEP_INS LLAVE_CIERRE }]
  [Programa ::= Instrucciones (*) , {EOF LLAVE_CIERRE }]
}
transition on SEP_INS to state [130]

-------------------
lalr_state [35]: {
  [Declaracion ::= DeclaracionProc (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [36]: {
  [EBasica ::= (*) FALSE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E0 ::= (*) E1 OP_RESTA E1 , {DO }]
  [E2 ::= (*) E3 , {OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR DO }]
  [E4 ::= (*) E5 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR DO }]
  [E6 ::= (*) OP_MULT E6 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [EBasica ::= (*) NUM_REAL , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [EBasica ::= (*) NULL , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E1 ::= (*) E2 , {OP_SUMA OP_RESTA AND OR DO }]
  [E4 ::= (*) OP_RESTA E5 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR DO }]
  [E5 ::= (*) E5 OP_FLECHA ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E7 ::= (*) EBasica , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [InstrWhile ::= WHILE (*) E0 DO BloqOpc ENDWHILE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) CADENA , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E0 ::= (*) E1 , {DO }]
  [E3 ::= (*) E3 OP3 E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR DO }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E6 ::= (*) E7 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [EBasica ::= (*) TRUE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E0 ::= (*) E1 OP_SUMA E0 , {DO }]
  [E2 ::= (*) E2 OP2 E3 , {OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR DO }]
  [E4 ::= (*) NOT E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR DO }]
  [E5 ::= (*) E6 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [EBasica ::= (*) NUM_INT , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [EBasica ::= (*) ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E1 ::= (*) E1 OP1 E2 , {OP_SUMA OP_RESTA AND OR DO }]
  [E3 ::= (*) E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR DO }]
  [E5 ::= (*) E5 PUNTO ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR DO }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [126]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [37]: {
  [Instruccion ::= InstrLibMem (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [38]: {
  [EBasica ::= (*) FALSE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {P_CIERRE }]
  [E2 ::= (*) E3 , {P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [E4 ::= (*) E5 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E6 ::= (*) OP_MULT E6 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) NUM_REAL , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) NULL , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {P_CIERRE OP_SUMA OP_RESTA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E5 ::= (*) E5 OP_FLECHA ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E7 ::= (*) EBasica , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) CADENA , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E0 ::= (*) E1 , {P_CIERRE }]
  [E3 ::= (*) E3 OP3 E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E6 ::= (*) E7 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) TRUE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {P_CIERRE }]
  [E2 ::= (*) E2 OP2 E3 , {P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [E4 ::= (*) NOT E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E5 ::= (*) E6 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) NUM_INT , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {P_CIERRE OP_SUMA OP_RESTA AND OR }]
  [E3 ::= (*) E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E7 ::= P_AP (*) E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [124]
transition on E1 to state [49]
transition on E2 to state [47]
transition on ID to state [17]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [39]: {
  [DeclaracionProc ::= PROC (*) ID ParametrosFormales Bloque , {SEP_SEC SEP_INS }]
}
transition on ID to state [110]

-------------------
lalr_state [40]: {
  [E6 ::= E7 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [41]: {
  [EBasica ::= FALSE (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [42]: {
  [E5 ::= E6 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [43]: {
  [Declaraciones ::= Declaracion (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [44]: {
  [E4 ::= E5 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= E5 (*) PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= E5 (*) CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= E5 (*) OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on CORCHETE_AP to state [105]
transition on OP_FLECHA to state [104]
transition on PUNTO to state [103]

-------------------
lalr_state [45]: {
  [E3 ::= E4 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [46]: {
  [OP3 ::= (*) OP_100 , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E3 ::= E3 (*) OP3 E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [OP3 ::= (*) OP_DIV , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E2 ::= E3 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [OP3 ::= (*) OP_MULT , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}
transition on OP_DIV to state [73]
transition on OP_100 to state [72]
transition on OP3 to state [71]
transition on OP_MULT to state [70]

-------------------
lalr_state [47]: {
  [OP2 ::= (*) OP_MAY_IG , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP2 ::= (*) OP_MENOR , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E2 ::= E2 (*) OP2 E3 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [OP2 ::= (*) OP_DIST , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP2 ::= (*) OP_MAYOR , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E1 ::= E2 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [OP2 ::= (*) OP_COMP , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP2 ::= (*) OP_MEN_IG , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}
transition on OP_COMP to state [68]
transition on OP_MEN_IG to state [67]
transition on OP_MAY_IG to state [66]
transition on OP2 to state [65]
transition on OP_DIST to state [64]
transition on OP_MAYOR to state [63]
transition on OP_MENOR to state [62]

-------------------
lalr_state [48]: {
  [Tipo ::= (*) TipoBasico , {ID }]
  [DeclaracionVar ::= VAR (*) Tipo ID , {SEP_SEC SEP_INS }]
  [TipoPuntero ::= (*) POINTER Tipo , {ID }]
  [TipoBasico ::= (*) STRING , {ID }]
  [TipoBasico ::= (*) INT , {ID }]
  [Tipo ::= (*) TipoArray , {ID }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {ID }]
  [TipoBasico ::= (*) BOOL , {ID }]
  [Tipo ::= (*) TipoPuntero , {ID }]
  [Tipo ::= (*) ID , {ID }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {ID }]
  [TipoBasico ::= (*) REAL , {ID }]
  [Tipo ::= (*) TipoRegistro , {ID }]
}
transition on TipoArray to state [87]
transition on POINTER to state [86]
transition on REAL to state [85]
transition on ID to state [84]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [76]
transition on INT to state [75]

-------------------
lalr_state [49]: {
  [E0 ::= E1 (*) OP_SUMA E0 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [E0 ::= E1 (*) , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [OP1 ::= (*) OR , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E0 ::= E1 (*) OP_RESTA E1 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [OP1 ::= (*) AND , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E1 ::= E1 (*) OP1 E2 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on OR to state [58]
transition on OP_SUMA to state [57]
transition on OP_RESTA to state [56]
transition on AND to state [55]
transition on OP1 to state [54]

-------------------
lalr_state [50]: {
  [InstrAsig ::= E0 (*) ASIG E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on ASIG to state [52]

-------------------
lalr_state [51]: {
  [Declaracion ::= DeclaracionTipo (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [52]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_RESTA E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [InstrAsig ::= E0 ASIG (*) E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_SUMA E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E1 ::= (*) E1 OP1 E2 , {EOF SEP_INS OP_SUMA OP_RESTA LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 LLAVE_CIERRE AND OR ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP LLAVE_CIERRE PUNTO OP_FLECHA AND OR ELSE ENDIF ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [53]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [53]: {
  [InstrAsig ::= E0 ASIG E0 (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [54]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E1 ::= E1 OP1 (*) E2 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E2 to state [61]
transition on ID to state [17]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [55]: {
  [OP1 ::= AND (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [56]: {
  [E0 ::= E1 OP_RESTA (*) E1 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS ASIG P_CIERRE OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E1 ::= (*) E2 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS ASIG P_CIERRE OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E1 ::= (*) E1 OP1 E2 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E1 to state [60]
transition on E2 to state [47]
transition on ID to state [17]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [57]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E0 ::= (*) E1 OP_RESTA E1 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [E2 ::= (*) E3 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E1 ::= (*) E2 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E0 ::= (*) E1 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E0 ::= E1 OP_SUMA (*) E0 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E0 ::= (*) E1 OP_SUMA E0 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [E2 ::= (*) E2 OP2 E3 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E1 ::= (*) E1 OP1 E2 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [59]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [58]: {
  [OP1 ::= OR (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [59]: {
  [E0 ::= E1 OP_SUMA E0 (*) , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [60]: {
  [OP1 ::= (*) OR , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E0 ::= E1 OP_RESTA E1 (*) , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA THEN ELSE ENDIF DO ENDWHILE }]
  [OP1 ::= (*) AND , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E1 ::= E1 (*) OP1 E2 , {EOF SEP_INS ASIG P_CIERRE CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on OR to state [58]
transition on AND to state [55]
transition on OP1 to state [54]

-------------------
lalr_state [61]: {
  [OP2 ::= (*) OP_MAY_IG , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP2 ::= (*) OP_MENOR , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E2 ::= E2 (*) OP2 E3 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [OP2 ::= (*) OP_DIST , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP2 ::= (*) OP_MAYOR , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP2 ::= (*) OP_COMP , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP2 ::= (*) OP_MEN_IG , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E1 ::= E1 OP1 E2 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on OP_COMP to state [68]
transition on OP_MEN_IG to state [67]
transition on OP_MAY_IG to state [66]
transition on OP2 to state [65]
transition on OP_DIST to state [64]
transition on OP_MAYOR to state [63]
transition on OP_MENOR to state [62]

-------------------
lalr_state [62]: {
  [OP2 ::= OP_MENOR (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [63]: {
  [OP2 ::= OP_MAYOR (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [64]: {
  [OP2 ::= OP_DIST (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [65]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E2 ::= E2 OP2 (*) E3 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NUM_INT to state [3]
transition on NOT to state [9]
transition on E3 to state [69]
transition on E4 to state [45]
transition on E5 to state [44]
transition on P_AP to state [38]
transition on E6 to state [42]
transition on ID to state [17]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on EBasica to state [13]
transition on NULL to state [24]
transition on OP_MULT to state [21]
transition on TRUE to state [19]
transition on OP_RESTA to state [25]
transition on NUM_REAL to state [30]
transition on CADENA to state [22]

-------------------
lalr_state [66]: {
  [OP2 ::= OP_MAY_IG (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [67]: {
  [OP2 ::= OP_MEN_IG (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [68]: {
  [OP2 ::= OP_COMP (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [69]: {
  [E2 ::= E2 OP2 E3 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [OP3 ::= (*) OP_100 , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [E3 ::= E3 (*) OP3 E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [OP3 ::= (*) OP_DIV , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
  [OP3 ::= (*) OP_MULT , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}
transition on OP_DIV to state [73]
transition on OP_100 to state [72]
transition on OP3 to state [71]
transition on OP_MULT to state [70]

-------------------
lalr_state [70]: {
  [OP3 ::= OP_MULT (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [71]: {
  [EBasica ::= (*) FALSE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NULL , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) OP_RESTA E5 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) EBasica , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= E3 OP3 (*) E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) CADENA , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E6 ::= (*) E7 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) TRUE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= (*) NOT E4 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E6 , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) NUM_INT , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [EBasica ::= (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on NUM_INT to state [3]
transition on NOT to state [9]
transition on E4 to state [74]
transition on E5 to state [44]
transition on P_AP to state [38]
transition on E6 to state [42]
transition on ID to state [17]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on EBasica to state [13]
transition on NULL to state [24]
transition on OP_MULT to state [21]
transition on TRUE to state [19]
transition on OP_RESTA to state [25]
transition on NUM_REAL to state [30]
transition on CADENA to state [22]

-------------------
lalr_state [72]: {
  [OP3 ::= OP_100 (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [73]: {
  [OP3 ::= OP_DIV (*) , {P_AP OP_RESTA OP_MULT TRUE FALSE NOT NULL NUM_INT NUM_REAL CADENA ID }]
}

-------------------
lalr_state [74]: {
  [E3 ::= E3 OP3 E4 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [75]: {
  [TipoBasico ::= INT (*) , {OP_AMP ID }]
}

-------------------
lalr_state [76]: {
  [DeclaracionVar ::= VAR Tipo (*) ID , {SEP_SEC SEP_INS }]
}
transition on ID to state [102]

-------------------
lalr_state [77]: {
  [TipoBasico ::= BOOL (*) , {OP_AMP ID }]
}

-------------------
lalr_state [78]: {
  [Tipo ::= TipoRegistro (*) , {OP_AMP ID }]
}

-------------------
lalr_state [79]: {
  [TipoArray ::= ARRAY (*) CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {OP_AMP ID }]
}
transition on CORCHETE_AP to state [97]

-------------------
lalr_state [80]: {
  [Tipo ::= TipoBasico (*) , {OP_AMP ID }]
}

-------------------
lalr_state [81]: {
  [TipoRegistro ::= RECORD (*) LLAVE_AP Campos LLAVE_CIERRE , {OP_AMP ID }]
}
transition on LLAVE_AP to state [89]

-------------------
lalr_state [82]: {
  [TipoBasico ::= STRING (*) , {OP_AMP ID }]
}

-------------------
lalr_state [83]: {
  [Tipo ::= TipoPuntero (*) , {OP_AMP ID }]
}

-------------------
lalr_state [84]: {
  [Tipo ::= ID (*) , {OP_AMP ID }]
}

-------------------
lalr_state [85]: {
  [TipoBasico ::= REAL (*) , {OP_AMP ID }]
}

-------------------
lalr_state [86]: {
  [Tipo ::= (*) TipoBasico , {OP_AMP ID }]
  [TipoPuntero ::= POINTER (*) Tipo , {OP_AMP ID }]
  [TipoPuntero ::= (*) POINTER Tipo , {OP_AMP ID }]
  [TipoBasico ::= (*) STRING , {OP_AMP ID }]
  [TipoBasico ::= (*) INT , {OP_AMP ID }]
  [Tipo ::= (*) TipoArray , {OP_AMP ID }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {OP_AMP ID }]
  [TipoBasico ::= (*) BOOL , {OP_AMP ID }]
  [Tipo ::= (*) TipoPuntero , {OP_AMP ID }]
  [Tipo ::= (*) ID , {OP_AMP ID }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {OP_AMP ID }]
  [TipoBasico ::= (*) REAL , {OP_AMP ID }]
  [Tipo ::= (*) TipoRegistro , {OP_AMP ID }]
}
transition on TipoArray to state [87]
transition on POINTER to state [86]
transition on REAL to state [85]
transition on ID to state [84]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [88]
transition on INT to state [75]

-------------------
lalr_state [87]: {
  [Tipo ::= TipoArray (*) , {OP_AMP ID }]
}

-------------------
lalr_state [88]: {
  [TipoPuntero ::= POINTER Tipo (*) , {OP_AMP ID }]
}

-------------------
lalr_state [89]: {
  [Tipo ::= (*) TipoBasico , {ID }]
  [TipoPuntero ::= (*) POINTER Tipo , {ID }]
  [Campos ::= (*) Campos SEP_INS Campo , {SEP_INS LLAVE_CIERRE }]
  [TipoBasico ::= (*) STRING , {ID }]
  [TipoBasico ::= (*) INT , {ID }]
  [Tipo ::= (*) TipoArray , {ID }]
  [TipoRegistro ::= RECORD LLAVE_AP (*) Campos LLAVE_CIERRE , {OP_AMP ID }]
  [Campo ::= (*) Tipo ID , {SEP_INS LLAVE_CIERRE }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {ID }]
  [TipoBasico ::= (*) BOOL , {ID }]
  [Tipo ::= (*) TipoPuntero , {ID }]
  [Tipo ::= (*) ID , {ID }]
  [Campos ::= (*) Campo , {SEP_INS LLAVE_CIERRE }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {ID }]
  [TipoBasico ::= (*) REAL , {ID }]
  [Tipo ::= (*) TipoRegistro , {ID }]
}
transition on Campo to state [92]
transition on TipoArray to state [87]
transition on POINTER to state [86]
transition on REAL to state [85]
transition on ID to state [84]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on Campos to state [91]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [90]
transition on INT to state [75]

-------------------
lalr_state [90]: {
  [Campo ::= Tipo (*) ID , {SEP_INS LLAVE_CIERRE }]
}
transition on ID to state [96]

-------------------
lalr_state [91]: {
  [Campos ::= Campos (*) SEP_INS Campo , {SEP_INS LLAVE_CIERRE }]
  [TipoRegistro ::= RECORD LLAVE_AP Campos (*) LLAVE_CIERRE , {OP_AMP ID }]
}
transition on SEP_INS to state [94]
transition on LLAVE_CIERRE to state [93]

-------------------
lalr_state [92]: {
  [Campos ::= Campo (*) , {SEP_INS LLAVE_CIERRE }]
}

-------------------
lalr_state [93]: {
  [TipoRegistro ::= RECORD LLAVE_AP Campos LLAVE_CIERRE (*) , {OP_AMP ID }]
}

-------------------
lalr_state [94]: {
  [Tipo ::= (*) TipoBasico , {ID }]
  [Campos ::= Campos SEP_INS (*) Campo , {SEP_INS LLAVE_CIERRE }]
  [TipoPuntero ::= (*) POINTER Tipo , {ID }]
  [TipoBasico ::= (*) STRING , {ID }]
  [TipoBasico ::= (*) INT , {ID }]
  [Tipo ::= (*) TipoArray , {ID }]
  [Campo ::= (*) Tipo ID , {SEP_INS LLAVE_CIERRE }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {ID }]
  [TipoBasico ::= (*) BOOL , {ID }]
  [Tipo ::= (*) TipoPuntero , {ID }]
  [Tipo ::= (*) ID , {ID }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {ID }]
  [TipoBasico ::= (*) REAL , {ID }]
  [Tipo ::= (*) TipoRegistro , {ID }]
}
transition on Campo to state [95]
transition on TipoArray to state [87]
transition on POINTER to state [86]
transition on REAL to state [85]
transition on ID to state [84]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [90]
transition on INT to state [75]

-------------------
lalr_state [95]: {
  [Campos ::= Campos SEP_INS Campo (*) , {SEP_INS LLAVE_CIERRE }]
}

-------------------
lalr_state [96]: {
  [Campo ::= Tipo ID (*) , {SEP_INS LLAVE_CIERRE }]
}

-------------------
lalr_state [97]: {
  [TipoArray ::= ARRAY CORCHETE_AP (*) NUM_INT CORCHETE_CIERRE OF Tipo , {OP_AMP ID }]
}
transition on NUM_INT to state [98]

-------------------
lalr_state [98]: {
  [TipoArray ::= ARRAY CORCHETE_AP NUM_INT (*) CORCHETE_CIERRE OF Tipo , {OP_AMP ID }]
}
transition on CORCHETE_CIERRE to state [99]

-------------------
lalr_state [99]: {
  [TipoArray ::= ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE (*) OF Tipo , {OP_AMP ID }]
}
transition on OF to state [100]

-------------------
lalr_state [100]: {
  [Tipo ::= (*) TipoBasico , {OP_AMP ID }]
  [TipoPuntero ::= (*) POINTER Tipo , {OP_AMP ID }]
  [TipoBasico ::= (*) STRING , {OP_AMP ID }]
  [TipoBasico ::= (*) INT , {OP_AMP ID }]
  [Tipo ::= (*) TipoArray , {OP_AMP ID }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {OP_AMP ID }]
  [TipoBasico ::= (*) BOOL , {OP_AMP ID }]
  [Tipo ::= (*) TipoPuntero , {OP_AMP ID }]
  [TipoArray ::= ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF (*) Tipo , {OP_AMP ID }]
  [Tipo ::= (*) ID , {OP_AMP ID }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {OP_AMP ID }]
  [TipoBasico ::= (*) REAL , {OP_AMP ID }]
  [Tipo ::= (*) TipoRegistro , {OP_AMP ID }]
}
transition on TipoArray to state [87]
transition on POINTER to state [86]
transition on REAL to state [85]
transition on ID to state [84]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [101]
transition on INT to state [75]

-------------------
lalr_state [101]: {
  [TipoArray ::= ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo (*) , {OP_AMP ID }]
}

-------------------
lalr_state [102]: {
  [DeclaracionVar ::= VAR Tipo ID (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [103]: {
  [E5 ::= E5 PUNTO (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on ID to state [109]

-------------------
lalr_state [104]: {
  [E5 ::= E5 OP_FLECHA (*) ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on ID to state [108]

-------------------
lalr_state [105]: {
  [EBasica ::= (*) FALSE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {CORCHETE_CIERRE }]
  [E2 ::= (*) E3 , {OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE AND OR }]
  [E4 ::= (*) E5 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE AND OR }]
  [E6 ::= (*) OP_MULT E6 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) NUM_REAL , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) NULL , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {OP_SUMA OP_RESTA CORCHETE_CIERRE AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE AND OR }]
  [E5 ::= (*) E5 OP_FLECHA ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E7 ::= (*) EBasica , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) CADENA , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E0 ::= (*) E1 , {CORCHETE_CIERRE }]
  [E5 ::= E5 CORCHETE_AP (*) E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E3 ::= (*) E3 OP3 E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE AND OR }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E6 ::= (*) E7 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) TRUE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {CORCHETE_CIERRE }]
  [E2 ::= (*) E2 OP2 E3 , {OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST CORCHETE_CIERRE AND OR }]
  [E4 ::= (*) NOT E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE AND OR }]
  [E5 ::= (*) E6 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) NUM_INT , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [EBasica ::= (*) ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {OP_SUMA OP_RESTA CORCHETE_CIERRE AND OR }]
  [E3 ::= (*) E4 , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE AND OR }]
  [E5 ::= (*) E5 PUNTO ID , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE PUNTO OP_FLECHA AND OR }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [106]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [106]: {
  [E5 ::= E5 CORCHETE_AP E0 (*) CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on CORCHETE_CIERRE to state [107]

-------------------
lalr_state [107]: {
  [E5 ::= E5 CORCHETE_AP E0 CORCHETE_CIERRE (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [108]: {
  [E5 ::= E5 OP_FLECHA ID (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [109]: {
  [E5 ::= E5 PUNTO ID (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [110]: {
  [DeclaracionProc ::= PROC ID (*) ParametrosFormales Bloque , {SEP_SEC SEP_INS }]
  [ParametrosFormales ::= (*) P_AP Parametros P_CIERRE , {LLAVE_AP }]
  [ParametrosFormales ::= (*) P_AP P_CIERRE , {LLAVE_AP }]
}
transition on ParametrosFormales to state [112]
transition on P_AP to state [111]

-------------------
lalr_state [111]: {
  [Parametro ::= (*) Tipo ID , {P_CIERRE COMA }]
  [Tipo ::= (*) TipoBasico , {OP_AMP ID }]
  [TipoBasico ::= (*) INT , {OP_AMP ID }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {OP_AMP ID }]
  [Parametros ::= (*) Parametros COMA Parametro , {P_CIERRE COMA }]
  [Tipo ::= (*) TipoRegistro , {OP_AMP ID }]
  [TipoBasico ::= (*) STRING , {OP_AMP ID }]
  [ParametrosFormales ::= P_AP (*) P_CIERRE , {LLAVE_AP }]
  [Parametro ::= (*) Tipo OP_AMP ID , {P_CIERRE COMA }]
  [Tipo ::= (*) ID , {OP_AMP ID }]
  [TipoBasico ::= (*) REAL , {OP_AMP ID }]
  [Parametros ::= (*) Parametro , {P_CIERRE COMA }]
  [Tipo ::= (*) TipoPuntero , {OP_AMP ID }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {OP_AMP ID }]
  [TipoPuntero ::= (*) POINTER Tipo , {OP_AMP ID }]
  [ParametrosFormales ::= P_AP (*) Parametros P_CIERRE , {LLAVE_AP }]
  [Tipo ::= (*) TipoArray , {OP_AMP ID }]
  [TipoBasico ::= (*) BOOL , {OP_AMP ID }]
}
transition on P_CIERRE to state [117]
transition on TipoArray to state [87]
transition on REAL to state [85]
transition on POINTER to state [86]
transition on Parametros to state [116]
transition on ID to state [84]
transition on Parametro to state [115]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [114]
transition on INT to state [75]

-------------------
lalr_state [112]: {
  [DeclaracionProc ::= PROC ID ParametrosFormales (*) Bloque , {SEP_SEC SEP_INS }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {SEP_SEC SEP_INS }]
}
transition on Bloque to state [113]
transition on LLAVE_AP to state [12]

-------------------
lalr_state [113]: {
  [DeclaracionProc ::= PROC ID ParametrosFormales Bloque (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [114]: {
  [Parametro ::= Tipo (*) OP_AMP ID , {P_CIERRE COMA }]
  [Parametro ::= Tipo (*) ID , {P_CIERRE COMA }]
}
transition on OP_AMP to state [122]
transition on ID to state [121]

-------------------
lalr_state [115]: {
  [Parametros ::= Parametro (*) , {P_CIERRE COMA }]
}

-------------------
lalr_state [116]: {
  [Parametros ::= Parametros (*) COMA Parametro , {P_CIERRE COMA }]
  [ParametrosFormales ::= P_AP Parametros (*) P_CIERRE , {LLAVE_AP }]
}
transition on P_CIERRE to state [119]
transition on COMA to state [118]

-------------------
lalr_state [117]: {
  [ParametrosFormales ::= P_AP P_CIERRE (*) , {LLAVE_AP }]
}

-------------------
lalr_state [118]: {
  [Tipo ::= (*) TipoBasico , {OP_AMP ID }]
  [TipoPuntero ::= (*) POINTER Tipo , {OP_AMP ID }]
  [TipoBasico ::= (*) STRING , {OP_AMP ID }]
  [TipoBasico ::= (*) INT , {OP_AMP ID }]
  [Tipo ::= (*) TipoArray , {OP_AMP ID }]
  [Parametros ::= Parametros COMA (*) Parametro , {P_CIERRE COMA }]
  [Parametro ::= (*) Tipo OP_AMP ID , {P_CIERRE COMA }]
  [TipoRegistro ::= (*) RECORD LLAVE_AP Campos LLAVE_CIERRE , {OP_AMP ID }]
  [TipoBasico ::= (*) BOOL , {OP_AMP ID }]
  [Tipo ::= (*) TipoPuntero , {OP_AMP ID }]
  [Tipo ::= (*) ID , {OP_AMP ID }]
  [Parametro ::= (*) Tipo ID , {P_CIERRE COMA }]
  [TipoArray ::= (*) ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo , {OP_AMP ID }]
  [TipoBasico ::= (*) REAL , {OP_AMP ID }]
  [Tipo ::= (*) TipoRegistro , {OP_AMP ID }]
}
transition on TipoArray to state [87]
transition on POINTER to state [86]
transition on REAL to state [85]
transition on ID to state [84]
transition on Parametro to state [120]
transition on TipoPuntero to state [83]
transition on STRING to state [82]
transition on RECORD to state [81]
transition on TipoBasico to state [80]
transition on ARRAY to state [79]
transition on TipoRegistro to state [78]
transition on BOOL to state [77]
transition on Tipo to state [114]
transition on INT to state [75]

-------------------
lalr_state [119]: {
  [ParametrosFormales ::= P_AP Parametros P_CIERRE (*) , {LLAVE_AP }]
}

-------------------
lalr_state [120]: {
  [Parametros ::= Parametros COMA Parametro (*) , {P_CIERRE COMA }]
}

-------------------
lalr_state [121]: {
  [Parametro ::= Tipo ID (*) , {P_CIERRE COMA }]
}

-------------------
lalr_state [122]: {
  [Parametro ::= Tipo OP_AMP (*) ID , {P_CIERRE COMA }]
}
transition on ID to state [123]

-------------------
lalr_state [123]: {
  [Parametro ::= Tipo OP_AMP ID (*) , {P_CIERRE COMA }]
}

-------------------
lalr_state [124]: {
  [E7 ::= P_AP E0 (*) P_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on P_CIERRE to state [125]

-------------------
lalr_state [125]: {
  [E7 ::= P_AP E0 P_CIERRE (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [126]: {
  [InstrWhile ::= WHILE E0 (*) DO BloqOpc ENDWHILE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on DO to state [127]

-------------------
lalr_state [127]: {
  [E5 ::= (*) E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) CADENA , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrInvocProc ::= (*) CALL ID ParamsR , {SEP_INS ENDWHILE }]
  [BloqOpc ::= (*) , {ENDWHILE }]
  [Instruccion ::= (*) InstrLectura , {SEP_INS ENDWHILE }]
  [E4 ::= (*) E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 , {ASIG }]
  [EBasica ::= (*) NUM_INT , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrEscritura ::= (*) WRITE E0 , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrInvocProc , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrAsig , {SEP_INS ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E3 OP3 E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThen ::= (*) IF E0 THEN BloqOpc ENDIF , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrEscritura , {SEP_INS ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) NUM_REAL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrNewLine ::= (*) NL , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) Bloque , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrIfThen , {SEP_INS ENDWHILE }]
  [E6 ::= (*) E7 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) NULL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= (*) IF E0 THEN BloqOpc ELSE BloqOpc ENDIF , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrNewLine , {SEP_INS ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) TRUE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrReservMem ::= (*) NEW E0 , {SEP_INS ENDWHILE }]
  [InstrAsig ::= (*) E0 ASIG E0 , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrIfThenElse , {SEP_INS ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [InstrWhile ::= WHILE E0 DO (*) BloqOpc ENDWHILE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E0 ::= (*) E1 OP_SUMA E0 , {ASIG }]
  [InstrWhile ::= (*) WHILE E0 DO BloqOpc ENDWHILE , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrReservMem , {SEP_INS ENDWHILE }]
  [Instrucciones ::= (*) Instrucciones SEP_INS Instruccion , {SEP_INS ENDWHILE }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {SEP_INS ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E2 OP2 E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) FALSE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrLibMem ::= (*) DELETE E0 , {SEP_INS ENDWHILE }]
  [BloqOpc ::= (*) Instrucciones , {ENDWHILE }]
  [Instruccion ::= (*) InstrWhile , {SEP_INS ENDWHILE }]
  [E7 ::= (*) EBasica , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) NOT E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {ASIG }]
  [InstrLectura ::= (*) READ E0 , {SEP_INS ENDWHILE }]
  [Instruccion ::= (*) InstrLibMem , {SEP_INS ENDWHILE }]
  [Instrucciones ::= (*) Instruccion , {SEP_INS ENDWHILE }]
}
transition on E0 to state [50]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on E6 to state [42]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on P_AP to state [38]
transition on InstrLibMem to state [37]
transition on WHILE to state [36]
transition on Instrucciones to state [129]
transition on NL to state [33]
transition on READ to state [32]
transition on Bloque to state [31]
transition on NUM_REAL to state [30]
transition on InstrAsig to state [29]
transition on InstrLectura to state [28]
transition on OP_RESTA to state [25]
transition on NULL to state [24]
transition on InstrWhile to state [23]
transition on CADENA to state [22]
transition on OP_MULT to state [21]
transition on NEW to state [20]
transition on TRUE to state [19]
transition on InstrIfThenElse to state [18]
transition on ID to state [17]
transition on Instruccion to state [16]
transition on IF to state [15]
transition on InstrNewLine to state [14]
transition on EBasica to state [13]
transition on LLAVE_AP to state [12]
transition on CALL to state [11]
transition on NOT to state [9]
transition on WRITE to state [8]
transition on DELETE to state [7]
transition on InstrInvocProc to state [4]
transition on InstrEscritura to state [5]
transition on NUM_INT to state [3]
transition on BloqOpc to state [128]
transition on InstrIfThen to state [2]
transition on InstrReservMem to state [1]

-------------------
lalr_state [128]: {
  [InstrWhile ::= WHILE E0 DO BloqOpc (*) ENDWHILE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on ENDWHILE to state [132]

-------------------
lalr_state [129]: {
  [BloqOpc ::= Instrucciones (*) , {ELSE ENDIF ENDWHILE }]
  [Instrucciones ::= Instrucciones (*) SEP_INS Instruccion , {SEP_INS ELSE ENDIF ENDWHILE }]
}
transition on SEP_INS to state [130]

-------------------
lalr_state [130]: {
  [E5 ::= (*) E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) CADENA , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrInvocProc ::= (*) CALL ID ParamsR , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrLectura , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E4 ::= (*) E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 , {ASIG }]
  [EBasica ::= (*) NUM_INT , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrEscritura ::= (*) WRITE E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrInvocProc , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrAsig , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) OP_MULT E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E3 OP3 E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThen ::= (*) IF E0 THEN BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrEscritura , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) NUM_REAL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrNewLine ::= (*) NL , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) Bloque , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrIfThen , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) E7 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) NULL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= (*) IF E0 THEN BloqOpc ELSE BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrNewLine , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 PUNTO ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) TRUE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrReservMem ::= (*) NEW E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [InstrAsig ::= (*) E0 ASIG E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrIfThenElse , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {ASIG }]
  [InstrWhile ::= (*) WHILE E0 DO BloqOpc ENDWHILE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instrucciones ::= Instrucciones SEP_INS (*) Instruccion , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrReservMem , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E2 OP2 E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) FALSE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrLibMem ::= (*) DELETE E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrWhile , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E7 ::= (*) EBasica , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) NOT E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {ASIG }]
  [InstrLectura ::= (*) READ E0 , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [Instruccion ::= (*) InstrLibMem , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on E0 to state [50]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on E6 to state [42]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on P_AP to state [38]
transition on InstrLibMem to state [37]
transition on WHILE to state [36]
transition on NL to state [33]
transition on READ to state [32]
transition on Bloque to state [31]
transition on NUM_REAL to state [30]
transition on InstrAsig to state [29]
transition on InstrLectura to state [28]
transition on OP_RESTA to state [25]
transition on NULL to state [24]
transition on InstrWhile to state [23]
transition on CADENA to state [22]
transition on OP_MULT to state [21]
transition on NEW to state [20]
transition on TRUE to state [19]
transition on InstrIfThenElse to state [18]
transition on ID to state [17]
transition on Instruccion to state [131]
transition on IF to state [15]
transition on InstrNewLine to state [14]
transition on EBasica to state [13]
transition on LLAVE_AP to state [12]
transition on CALL to state [11]
transition on NOT to state [9]
transition on WRITE to state [8]
transition on DELETE to state [7]
transition on InstrInvocProc to state [4]
transition on InstrEscritura to state [5]
transition on NUM_INT to state [3]
transition on InstrIfThen to state [2]
transition on InstrReservMem to state [1]

-------------------
lalr_state [131]: {
  [Instrucciones ::= Instrucciones SEP_INS Instruccion (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [132]: {
  [InstrWhile ::= WHILE E0 DO BloqOpc ENDWHILE (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [133]: {
  [InstrLectura ::= READ E0 (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [134]: {
  [$START ::= Programa EOF (*) , {EOF }]
}

-------------------
lalr_state [135]: {
  [E5 ::= E5 (*) PUNTO ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= E5 (*) CORCHETE_AP E0 CORCHETE_CIERRE , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E4 ::= OP_RESTA E5 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
  [E5 ::= E5 (*) OP_FLECHA ID , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}
transition on CORCHETE_AP to state [105]
transition on OP_FLECHA to state [104]
transition on PUNTO to state [103]

-------------------
lalr_state [136]: {
  [E6 ::= OP_MULT E6 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP CORCHETE_CIERRE LLAVE_CIERRE PUNTO OP_FLECHA COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [137]: {
  [InstrReservMem ::= NEW E0 (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [138]: {
  [InstrIfThen ::= IF E0 (*) THEN BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [InstrIfThenElse ::= IF E0 (*) THEN BloqOpc ELSE BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on THEN to state [139]

-------------------
lalr_state [139]: {
  [E5 ::= (*) E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) CADENA , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrInvocProc ::= (*) CALL ID ParamsR , {SEP_INS ELSE ENDIF }]
  [BloqOpc ::= (*) , {ELSE ENDIF }]
  [Instruccion ::= (*) InstrLectura , {SEP_INS ELSE ENDIF }]
  [E4 ::= (*) E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 , {ASIG }]
  [EBasica ::= (*) NUM_INT , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrEscritura ::= (*) WRITE E0 , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrInvocProc , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrAsig , {SEP_INS ELSE ENDIF }]
  [E6 ::= (*) OP_MULT E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E3 OP3 E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [InstrIfThen ::= IF E0 THEN (*) BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThen ::= (*) IF E0 THEN BloqOpc ENDIF , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrEscritura , {SEP_INS ELSE ENDIF }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) NUM_REAL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrNewLine ::= (*) NL , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) Bloque , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrIfThen , {SEP_INS ELSE ENDIF }]
  [E6 ::= (*) E7 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= IF E0 THEN (*) BloqOpc ELSE BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E3 ::= (*) E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) NULL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= (*) IF E0 THEN BloqOpc ELSE BloqOpc ENDIF , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrNewLine , {SEP_INS ELSE ENDIF }]
  [E5 ::= (*) E5 PUNTO ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) TRUE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrReservMem ::= (*) NEW E0 , {SEP_INS ELSE ENDIF }]
  [InstrAsig ::= (*) E0 ASIG E0 , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrIfThenElse , {SEP_INS ELSE ENDIF }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {ASIG }]
  [InstrWhile ::= (*) WHILE E0 DO BloqOpc ENDWHILE , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrReservMem , {SEP_INS ELSE ENDIF }]
  [Instrucciones ::= (*) Instrucciones SEP_INS Instruccion , {SEP_INS ELSE ENDIF }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {SEP_INS ELSE ENDIF }]
  [E5 ::= (*) E5 OP_FLECHA ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E2 OP2 E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) FALSE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrLibMem ::= (*) DELETE E0 , {SEP_INS ELSE ENDIF }]
  [BloqOpc ::= (*) Instrucciones , {ELSE ENDIF }]
  [Instruccion ::= (*) InstrWhile , {SEP_INS ELSE ENDIF }]
  [E7 ::= (*) EBasica , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) NOT E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {ASIG }]
  [InstrLectura ::= (*) READ E0 , {SEP_INS ELSE ENDIF }]
  [Instruccion ::= (*) InstrLibMem , {SEP_INS ELSE ENDIF }]
  [Instrucciones ::= (*) Instruccion , {SEP_INS ELSE ENDIF }]
}
transition on E0 to state [50]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on E6 to state [42]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on P_AP to state [38]
transition on InstrLibMem to state [37]
transition on WHILE to state [36]
transition on Instrucciones to state [129]
transition on NL to state [33]
transition on READ to state [32]
transition on Bloque to state [31]
transition on NUM_REAL to state [30]
transition on InstrAsig to state [29]
transition on InstrLectura to state [28]
transition on OP_RESTA to state [25]
transition on NULL to state [24]
transition on InstrWhile to state [23]
transition on CADENA to state [22]
transition on OP_MULT to state [21]
transition on NEW to state [20]
transition on TRUE to state [19]
transition on InstrIfThenElse to state [18]
transition on ID to state [17]
transition on Instruccion to state [16]
transition on IF to state [15]
transition on InstrNewLine to state [14]
transition on EBasica to state [13]
transition on LLAVE_AP to state [12]
transition on CALL to state [11]
transition on NOT to state [9]
transition on WRITE to state [8]
transition on DELETE to state [7]
transition on InstrInvocProc to state [4]
transition on InstrEscritura to state [5]
transition on NUM_INT to state [3]
transition on InstrIfThen to state [2]
transition on BloqOpc to state [140]
transition on InstrReservMem to state [1]

-------------------
lalr_state [140]: {
  [InstrIfThen ::= IF E0 THEN BloqOpc (*) ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [InstrIfThenElse ::= IF E0 THEN BloqOpc (*) ELSE BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on ENDIF to state [142]
transition on ELSE to state [141]

-------------------
lalr_state [141]: {
  [E5 ::= (*) E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) CADENA , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrInvocProc ::= (*) CALL ID ParamsR , {SEP_INS ENDIF }]
  [BloqOpc ::= (*) , {ENDIF }]
  [Instruccion ::= (*) InstrLectura , {SEP_INS ENDIF }]
  [E4 ::= (*) E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 , {ASIG }]
  [EBasica ::= (*) NUM_INT , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrEscritura ::= (*) WRITE E0 , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrInvocProc , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrAsig , {SEP_INS ENDIF }]
  [E6 ::= (*) OP_MULT E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E3 OP3 E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThen ::= (*) IF E0 THEN BloqOpc ENDIF , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrEscritura , {SEP_INS ENDIF }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) NUM_REAL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrNewLine ::= (*) NL , {SEP_INS ENDIF }]
  [Instruccion ::= (*) Bloque , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrIfThen , {SEP_INS ENDIF }]
  [InstrIfThenElse ::= IF E0 THEN BloqOpc ELSE (*) BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [E6 ::= (*) E7 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) NULL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= (*) IF E0 THEN BloqOpc ELSE BloqOpc ENDIF , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrNewLine , {SEP_INS ENDIF }]
  [E5 ::= (*) E5 PUNTO ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) TRUE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrReservMem ::= (*) NEW E0 , {SEP_INS ENDIF }]
  [InstrAsig ::= (*) E0 ASIG E0 , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrIfThenElse , {SEP_INS ENDIF }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {ASIG }]
  [InstrWhile ::= (*) WHILE E0 DO BloqOpc ENDWHILE , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrReservMem , {SEP_INS ENDIF }]
  [Instrucciones ::= (*) Instrucciones SEP_INS Instruccion , {SEP_INS ENDIF }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {SEP_INS ENDIF }]
  [E5 ::= (*) E5 OP_FLECHA ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E2 OP2 E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) FALSE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrLibMem ::= (*) DELETE E0 , {SEP_INS ENDIF }]
  [BloqOpc ::= (*) Instrucciones , {ENDIF }]
  [Instruccion ::= (*) InstrWhile , {SEP_INS ENDIF }]
  [E7 ::= (*) EBasica , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) NOT E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {ASIG }]
  [InstrLectura ::= (*) READ E0 , {SEP_INS ENDIF }]
  [Instruccion ::= (*) InstrLibMem , {SEP_INS ENDIF }]
  [Instrucciones ::= (*) Instruccion , {SEP_INS ENDIF }]
}
transition on E0 to state [50]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on E6 to state [42]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on P_AP to state [38]
transition on InstrLibMem to state [37]
transition on WHILE to state [36]
transition on Instrucciones to state [129]
transition on NL to state [33]
transition on READ to state [32]
transition on Bloque to state [31]
transition on NUM_REAL to state [30]
transition on InstrAsig to state [29]
transition on InstrLectura to state [28]
transition on OP_RESTA to state [25]
transition on NULL to state [24]
transition on InstrWhile to state [23]
transition on CADENA to state [22]
transition on OP_MULT to state [21]
transition on NEW to state [20]
transition on TRUE to state [19]
transition on InstrIfThenElse to state [18]
transition on ID to state [17]
transition on Instruccion to state [16]
transition on IF to state [15]
transition on InstrNewLine to state [14]
transition on EBasica to state [13]
transition on LLAVE_AP to state [12]
transition on CALL to state [11]
transition on NOT to state [9]
transition on WRITE to state [8]
transition on DELETE to state [7]
transition on InstrInvocProc to state [4]
transition on InstrEscritura to state [5]
transition on NUM_INT to state [3]
transition on BloqOpc to state [143]
transition on InstrIfThen to state [2]
transition on InstrReservMem to state [1]

-------------------
lalr_state [142]: {
  [InstrIfThen ::= IF E0 THEN BloqOpc ENDIF (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [143]: {
  [InstrIfThenElse ::= IF E0 THEN BloqOpc ELSE BloqOpc (*) ENDIF , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on ENDIF to state [144]

-------------------
lalr_state [144]: {
  [InstrIfThenElse ::= IF E0 THEN BloqOpc ELSE BloqOpc ENDIF (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [145]: {
  [Bloque ::= LLAVE_AP ProgramaAux (*) LLAVE_CIERRE , {EOF SEP_SEC SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on LLAVE_CIERRE to state [147]

-------------------
lalr_state [146]: {
  [ProgramaAux ::= Programa (*) , {LLAVE_CIERRE }]
}

-------------------
lalr_state [147]: {
  [Bloque ::= LLAVE_AP ProgramaAux LLAVE_CIERRE (*) , {EOF SEP_SEC SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [148]: {
  [ParamsR ::= (*) P_AP P_CIERRE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [InstrInvocProc ::= CALL ID (*) ParamsR , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [ParamsR ::= (*) P_AP Exprs P_CIERRE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on ParamsR to state [150]
transition on P_AP to state [149]

-------------------
lalr_state [149]: {
  [Exprs ::= (*) Exprs COMA E0 , {P_CIERRE COMA }]
  [EBasica ::= (*) FALSE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {P_CIERRE COMA }]
  [E2 ::= (*) E3 , {P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST COMA AND OR }]
  [E4 ::= (*) E5 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E6 ::= (*) OP_MULT E6 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [ParamsR ::= P_AP (*) P_CIERRE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) NUM_REAL , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) NULL , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E1 ::= (*) E2 , {P_CIERRE OP_SUMA OP_RESTA COMA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E5 OP_FLECHA ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E7 ::= (*) EBasica , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [Exprs ::= (*) E0 , {P_CIERRE COMA }]
  [EBasica ::= (*) CADENA , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E0 ::= (*) E1 , {P_CIERRE COMA }]
  [E3 ::= (*) E3 OP3 E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E6 ::= (*) E7 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [ParamsR ::= P_AP (*) Exprs P_CIERRE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
  [EBasica ::= (*) TRUE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {P_CIERRE COMA }]
  [E2 ::= (*) E2 OP2 E3 , {P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST COMA AND OR }]
  [E4 ::= (*) NOT E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E6 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) NUM_INT , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {P_CIERRE OP_SUMA OP_RESTA COMA AND OR }]
  [E3 ::= (*) E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E5 PUNTO ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
}
transition on P_CIERRE to state [153]
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on Exprs to state [152]
transition on FALSE to state [41]
transition on E0 to state [151]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [150]: {
  [InstrInvocProc ::= CALL ID ParamsR (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [151]: {
  [Exprs ::= E0 (*) , {P_CIERRE COMA }]
}

-------------------
lalr_state [152]: {
  [Exprs ::= Exprs (*) COMA E0 , {P_CIERRE COMA }]
  [ParamsR ::= P_AP Exprs (*) P_CIERRE , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}
transition on P_CIERRE to state [155]
transition on COMA to state [154]

-------------------
lalr_state [153]: {
  [ParamsR ::= P_AP P_CIERRE (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [154]: {
  [Exprs ::= Exprs COMA (*) E0 , {P_CIERRE COMA }]
  [EBasica ::= (*) FALSE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {P_CIERRE COMA }]
  [E2 ::= (*) E3 , {P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST COMA AND OR }]
  [E4 ::= (*) E5 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E6 ::= (*) OP_MULT E6 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) NUM_REAL , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) NULL , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E1 ::= (*) E2 , {P_CIERRE OP_SUMA OP_RESTA COMA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E5 OP_FLECHA ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E7 ::= (*) EBasica , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) CADENA , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E0 ::= (*) E1 , {P_CIERRE COMA }]
  [E3 ::= (*) E3 OP3 E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E6 ::= (*) E7 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) TRUE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {P_CIERRE COMA }]
  [E2 ::= (*) E2 OP2 E3 , {P_CIERRE OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST COMA AND OR }]
  [E4 ::= (*) NOT E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E6 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) NUM_INT , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [EBasica ::= (*) ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {P_CIERRE OP_SUMA OP_RESTA COMA AND OR }]
  [E3 ::= (*) E4 , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 COMA AND OR }]
  [E5 ::= (*) E5 PUNTO ID , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA COMA AND OR }]
}
transition on NULL to state [24]
transition on P_AP to state [38]
transition on OP_RESTA to state [25]
transition on OP_MULT to state [21]
transition on FALSE to state [41]
transition on E0 to state [156]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on ID to state [17]
transition on E4 to state [45]
transition on E5 to state [44]
transition on TRUE to state [19]
transition on E6 to state [42]
transition on E7 to state [40]
transition on NUM_REAL to state [30]
transition on NOT to state [9]
transition on EBasica to state [13]
transition on CADENA to state [22]
transition on NUM_INT to state [3]

-------------------
lalr_state [155]: {
  [ParamsR ::= P_AP Exprs P_CIERRE (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [156]: {
  [Exprs ::= Exprs COMA E0 (*) , {P_CIERRE COMA }]
}

-------------------
lalr_state [157]: {
  [DeclaracionTipo ::= TYPE Tipo (*) ID , {SEP_SEC SEP_INS }]
}
transition on ID to state [158]

-------------------
lalr_state [158]: {
  [DeclaracionTipo ::= TYPE Tipo ID (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [159]: {
  [E4 ::= NOT E4 (*) , {EOF SEP_INS ASIG P_CIERRE OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_CIERRE LLAVE_CIERRE COMA AND OR THEN ELSE ENDIF DO ENDWHILE }]
}

-------------------
lalr_state [160]: {
  [InstrEscritura ::= WRITE E0 (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [161]: {
  [InstrLibMem ::= DELETE E0 (*) , {EOF SEP_INS LLAVE_CIERRE ELSE ENDIF ENDWHILE }]
}

-------------------
lalr_state [162]: {
  [E5 ::= (*) E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) CADENA , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrInvocProc ::= (*) CALL ID ParamsR , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrLectura , {EOF SEP_INS LLAVE_CIERRE }]
  [E4 ::= (*) E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 , {ASIG }]
  [EBasica ::= (*) NUM_INT , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrEscritura ::= (*) WRITE E0 , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrInvocProc , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrAsig , {EOF SEP_INS LLAVE_CIERRE }]
  [E6 ::= (*) OP_MULT E6 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E3 OP3 E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThen ::= (*) IF E0 THEN BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrEscritura , {EOF SEP_INS LLAVE_CIERRE }]
  [E5 ::= (*) E5 CORCHETE_AP E0 CORCHETE_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E1 OP1 E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) NUM_REAL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrNewLine ::= (*) NL , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) Bloque , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrIfThen , {EOF SEP_INS LLAVE_CIERRE }]
  [E6 ::= (*) E7 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E3 ::= (*) E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [EBasica ::= (*) NULL , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrIfThenElse ::= (*) IF E0 THEN BloqOpc ELSE BloqOpc ENDIF , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrNewLine , {EOF SEP_INS LLAVE_CIERRE }]
  [E5 ::= (*) E5 PUNTO ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E1 ::= (*) E2 , {ASIG OP_SUMA OP_RESTA AND OR }]
  [EBasica ::= (*) TRUE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrReservMem ::= (*) NEW E0 , {EOF SEP_INS LLAVE_CIERRE }]
  [InstrAsig ::= (*) E0 ASIG E0 , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrIfThenElse , {EOF SEP_INS LLAVE_CIERRE }]
  [E7 ::= (*) P_AP E0 P_CIERRE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) OP_RESTA E5 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_SUMA E0 , {ASIG }]
  [InstrWhile ::= (*) WHILE E0 DO BloqOpc ENDWHILE , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrReservMem , {EOF SEP_INS LLAVE_CIERRE }]
  [Instrucciones ::= (*) Instrucciones SEP_INS Instruccion , {EOF SEP_INS LLAVE_CIERRE }]
  [Bloque ::= (*) LLAVE_AP ProgramaAux LLAVE_CIERRE , {EOF SEP_INS LLAVE_CIERRE }]
  [E5 ::= (*) E5 OP_FLECHA ID , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E2 ::= (*) E2 OP2 E3 , {ASIG OP_SUMA OP_RESTA OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST AND OR }]
  [EBasica ::= (*) FALSE , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [InstrLibMem ::= (*) DELETE E0 , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrWhile , {EOF SEP_INS LLAVE_CIERRE }]
  [E7 ::= (*) EBasica , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 CORCHETE_AP PUNTO OP_FLECHA AND OR }]
  [E4 ::= (*) NOT E4 , {ASIG OP_SUMA OP_RESTA OP_MULT OP_DIV OP_MENOR OP_MAYOR OP_MEN_IG OP_MAY_IG OP_COMP OP_DIST OP_100 AND OR }]
  [E0 ::= (*) E1 OP_RESTA E1 , {ASIG }]
  [InstrLectura ::= (*) READ E0 , {EOF SEP_INS LLAVE_CIERRE }]
  [Instruccion ::= (*) InstrLibMem , {EOF SEP_INS LLAVE_CIERRE }]
  [Instrucciones ::= (*) Instruccion , {EOF SEP_INS LLAVE_CIERRE }]
  [Programa ::= Declaraciones SEP_SEC (*) Instrucciones , {EOF LLAVE_CIERRE }]
}
transition on E0 to state [50]
transition on E1 to state [49]
transition on E2 to state [47]
transition on E3 to state [46]
transition on E4 to state [45]
transition on E5 to state [44]
transition on E6 to state [42]
transition on FALSE to state [41]
transition on E7 to state [40]
transition on P_AP to state [38]
transition on InstrLibMem to state [37]
transition on WHILE to state [36]
transition on Instrucciones to state [165]
transition on NL to state [33]
transition on READ to state [32]
transition on Bloque to state [31]
transition on NUM_REAL to state [30]
transition on InstrAsig to state [29]
transition on InstrLectura to state [28]
transition on OP_RESTA to state [25]
transition on NULL to state [24]
transition on InstrWhile to state [23]
transition on CADENA to state [22]
transition on OP_MULT to state [21]
transition on NEW to state [20]
transition on TRUE to state [19]
transition on InstrIfThenElse to state [18]
transition on ID to state [17]
transition on Instruccion to state [16]
transition on IF to state [15]
transition on InstrNewLine to state [14]
transition on EBasica to state [13]
transition on LLAVE_AP to state [12]
transition on CALL to state [11]
transition on NOT to state [9]
transition on WRITE to state [8]
transition on DELETE to state [7]
transition on InstrInvocProc to state [4]
transition on InstrEscritura to state [5]
transition on NUM_INT to state [3]
transition on InstrIfThen to state [2]
transition on InstrReservMem to state [1]

-------------------
lalr_state [163]: {
  [DeclaracionVar ::= (*) VAR Tipo ID , {SEP_SEC SEP_INS }]
  [Declaracion ::= (*) DeclaracionVar , {SEP_SEC SEP_INS }]
  [DeclaracionProc ::= (*) PROC ID ParametrosFormales Bloque , {SEP_SEC SEP_INS }]
  [Declaracion ::= (*) DeclaracionProc , {SEP_SEC SEP_INS }]
  [DeclaracionTipo ::= (*) TYPE Tipo ID , {SEP_SEC SEP_INS }]
  [Declaraciones ::= Declaraciones SEP_INS (*) Declaracion , {SEP_SEC SEP_INS }]
  [Declaracion ::= (*) DeclaracionTipo , {SEP_SEC SEP_INS }]
}
transition on TYPE to state [10]
transition on DeclaracionTipo to state [51]
transition on Declaracion to state [164]
transition on DeclaracionProc to state [35]
transition on PROC to state [39]
transition on VAR to state [48]
transition on DeclaracionVar to state [26]

-------------------
lalr_state [164]: {
  [Declaraciones ::= Declaraciones SEP_INS Declaracion (*) , {SEP_SEC SEP_INS }]
}

-------------------
lalr_state [165]: {
  [Instrucciones ::= Instrucciones (*) SEP_INS Instruccion , {EOF SEP_INS LLAVE_CIERRE }]
  [Programa ::= Declaraciones SEP_SEC Instrucciones (*) , {EOF LLAVE_CIERRE }]
}
transition on SEP_INS to state [130]

-------------------
------- CUP v0.11b beta 20140220 Parser Generation Summary -------
  0 errors and 0 warnings
  60 terminals, 45 non-terminals, and 102 productions declared, 
  producing 166 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "AnalizadorSintacticoCUP.java", and "ClaseLexica.java".
---------------------------------------------------- (v0.11b beta 20140220)
