options  {
  STATIC=false;
}  
PARSER_BEGIN(ConstructorAST)
package Pr3b.JavaCC;

import Pr3b.SemOps;
import Pr3b.TinyASint.*;

public class ConstructorAST {
   private SemOps sem = new SemOps();
}
PARSER_END(ConstructorAST)
  TOKEN: {<#letra:["a"-"z","A"-"Z"]>}
  TOKEN: {<#dPos:["1"-"9"]>}
  TOKEN: {<#digito:<dPos>|"0">} 
  TOKEN: {<NumInt: (["+", "-"])? (<dPos> (<digito>)*) | "0">}
  TOKEN: {<#pExp: ["e", "E"] <NumInt>>} 
  TOKEN: {<#pDec: "." <digito> ((<digito>)* <dPos>)?>}
  TOKEN: {<NumReal: <NumInt> (<pDec> (<pExp>)? | <pExp>)>}
  SKIP:  {<["\t"," ","\r","\b","\n"]>}  
  SKIP:  {<"#"(~["\n"])*>} 
  TOKEN: {<and:"and">}
  TOKEN: {<or: "or">}
  TOKEN: {<not: "not">}
  TOKEN: {<string: "string">}
  TOKEN: {<Null: "null">}
  TOKEN: {<proc: "proc">}
  TOKEN: {<If: "if">}
  TOKEN: {<then: "then">}
  TOKEN: {<Else: "else">}
  TOKEN: {<True: "true">}
  TOKEN: {<endif: "endif">}
  TOKEN: {<While: "while">}
  TOKEN: {<Do: "do">}
  TOKEN: {<endwhile: "endwhile">}
  TOKEN: {<call: "call">}
  TOKEN: {<record: "record">}
  TOKEN: {<Int: "int">}
  TOKEN: {<real: "real">}
  TOKEN: {<bool: "bool">}
  TOKEN: {<False: "false">}
  TOKEN: {<array: "array">}
  TOKEN: {<of: "of">}
  TOKEN: {<pointer: "pointer">}
  TOKEN: {<New: "new">}
  TOKEN: {<delete: "delete">}
  TOKEN: {<read: "read">}
  TOKEN: {<write: "write">}
  TOKEN: {<nl: "nl">}
  TOKEN: {<var: "var">}
  TOKEN: {<type: "type">}
  TOKEN: {<Id: <letra>(<letra>|<digito>|"_")*>}
  TOKEN: {<cadena: "\""(~["\"","\r","\b","\n"])*"\"">}

  Prog ProgramaP() : {Prog prog;} {prog=Programa() <EOF> {return prog;}}
  Prog Programa() : {Decs decs; Insts insts;} 
  				{decs=Declaraciones() "&&" insts=Instrucciones() {return sem.prog_con_decs(decs, insts);} |
  				insts=Instrucciones() {return sem.prog_sin_decs(insts);}}
  Decs Declaraciones(): {Dec dec; Decs decs;}
  				{dec=Declaracion() decs=RD(sem.decs_una(dec)) {return decs;}}
  Decs RD(Decs decsh) : {Dec dec; Decs decs;}
    {";" dec=Declaracion() decs=RD(sem.decs_muchas(decsh, dec)) {return decs;} |
    {return decsh;}}
  Dec Declaracion(): {Dec dec;}
    {dec=DeclaracionVar()  {return dec;} |
    dec=DeclaracionTipo() {return dec;} |
    dec=DeclaracionProc() {return dec;}}
  Dec DeclaracionVar() : {Tipo tipo; Token id;}
    {<var> tipo=Tipo() id=<Id> {return sem.dec_var(tipo, sem.str(id.image, id.beginLine, id.beginColumn));}}
  Dec DeclaracionTipo(): {Tipo tipo; Token id;}
  	{<type> tipo=Tipo() id=<Id> {return sem.dec_tipo(tipo, sem.str(id.image, id.beginLine, id.beginColumn));}}
  Dec DeclaracionProc(): {Token id; ParamsF params; Bloque bloque;}
  	{<proc> id=<Id> params=ParametrosFormales() bloque=Bloque() {return sem.dec_proc(sem.str(id.image, id.beginLine, id.beginColumn), params, bloque);}}
  ParamsF ParametrosFormales(): {ParamsF params;}
  	{"(" params=RPF() {return params;}}
  ParamsF RPF() : {ParamsF params;}
  	{params=Parametros() ")" {return params;} |
    ")" {return null;}}
  ParamsF Parametros(): {ParamF param; ParamsF params;}
  	{param=Parametro() params=RPs(sem.params_uno_f(param)) {return params;}}
  ParamsF RPs(ParamsF paramsh) : {ParamF param; ParamsF params;}
  	{";" param=Parametro() params=RPs(sem.params_muchos_f(paramsh, param)) {return params;} |
    {return paramsh;}}
  ParamF Parametro(): {Tipo tipo;}
    {tipo=Tipo() {return RP(tipo);}}
  ParamF RP(Tipo tipo) : {Token id;}
    {"&" id=<Id> {return sem.param_f_con_amp(tipo, sem.str(id.image, id.beginLine, id.beginColumn));} |
    id=<Id> {return sem.param_f_sin_amp(tipo, sem.str(id.image, id.beginLine, id.beginColumn));}}
  Bloque Bloque(): {Bloque prog;}
    {"{" prog=ProgramaAux() "}" {return prog;}}
  Bloque ProgramaAux(): {Prog prog;}
    {prog=Programa() {return sem.bloque_lleno(prog);} |
    {return sem.bloque_vacio();}}
  Tipo Tipo(): {Tipo tipo; Token id;}
    {tipo=TipoBasico() {return tipo;} |
    id=<Id> {return sem.tipo_id(sem.str(id.image, id.beginLine, id.beginColumn));} |
    tipo=TipoArray() {return tipo;} |
    tipo=TipoRegistro() {return tipo;} |
    tipo=TipoPuntero() {return tipo;}}
  Tipo TipoBasico(): {Token entero, Real, booleano, str;}
    {entero=<Int> {return sem.tipo_basico(sem.str(entero.image, entero.beginLine, entero.beginColumn));} |
    Real=<real>  {return sem.tipo_basico(sem.str(Real.image, Real.beginLine, Real.beginColumn));} |
    booleano=<bool>  {return sem.tipo_basico(sem.str(booleano.image, booleano.beginLine, booleano.beginColumn));} |
    str=<string>  {return sem.tipo_basico(sem.str(str.image, str.beginLine, str.beginColumn));}}
  Tipo TipoArray(): {Token num; Tipo tipo;}
    {<array> "[" num=<NumInt> "]" <of> tipo=Tipo() {return sem.tipo_array(sem.str(num.image, num.beginLine, num.beginColumn), tipo);}}
  Tipo TipoRegistro(): {Campos campos;}
    {<record> "{" campos=Campos() "}" {return sem.tipo_registro(campos);}}
  Campos Campos(): {Campo campo; Campos campos;}
    {campo=Campo() campos=RC(sem.campos_uno(campo)) {return campos;}}
  Campos RC(Campos camposh) : {Campo campo; Campos campos;}
    {";" campo=Campo() campos=RC(sem.campos_muchos(camposh, campo)) {return campos;} |
    {return camposh;}} 
  Campo Campo() : {Tipo tipo; Token id;}
    {tipo=Tipo() id=<Id> {return sem.campo(tipo, sem.str(id.image, id.beginLine, id.beginColumn));}}
  Tipo TipoPuntero() : {Tipo tipo;}
    {<pointer> tipo=Tipo() {return sem.tipo_puntero(tipo);}}

  Insts Instrucciones() : {Inst inst; Insts insts;}
    {inst=Instruccion() insts=RI(sem.insts_una(inst)) {return insts;}}
  Insts RI(Insts instsh) : {Inst inst; Insts insts;}
    {";" inst=Instruccion() insts=RI(sem.insts_muchas(instsh, inst)) {return insts;} |
    {return instsh;}}
  Inst Instruccion(): {Inst inst; Bloque bloque;}
    {inst=InstrAsig() {return inst;} |
    inst=InstrIfThen() {return inst;} |
    inst=InstrWhile() {return inst;} |
    inst=InstrLectura() {return inst;} |
    inst=InstrEscritura() {return inst;} |
    inst=InstrNewLine() {return inst;} |
    inst=InstrReservMem() {return inst;} |
    inst=InstrLibMem() {return inst;} |
    inst=InstrInvocProc() {return inst;} |
    bloque=Bloque() {return sem.inst_comp(bloque);}}
  Inst InstrAsig(): {Exp arg0; Exp arg1;}
  	{arg0=E0() "=" arg1=E0() {return sem.inst_asig(arg0, arg1);}}
  InstsOpc BloqueOpcional(): {Insts insts;}
    {insts=Instrucciones() {return sem.insts_opc_con_insts(insts);} |
    {return sem.insts_opc_sin_insts();}}
  Inst InstrIfThen(): {Inst_ifthen inst; Exp exp; InstsOpc instsOpc; Inst insts;}
    {inst=InitIfThen() insts=RIT(inst) {return insts;}}
  Inst RIT(Inst_ifthen insth) : {InstsOpc insts;}
    {<Else> insts=BloqueOpcional() <endif> {return sem.inst_ifthenelse(insth.exp1(), insth.inst(), insts);} |
    <endif> {return sem.inst_ifthen(insth.exp1(), insth.inst());}}
  Inst_ifthen InitIfThen(): {Exp exp; InstsOpc insts; Inst inst;}
    {<If> exp=E0() <then> insts=BloqueOpcional() {return sem.inst_if_then(exp, insts);}}
  Inst InstrWhile(): {Exp exp; InstsOpc insts;}
    {<While> exp=E0() <Do> insts=BloqueOpcional() <endwhile> {return sem.inst_while(exp, insts);}}
  Inst InstrLectura(): {Exp exp;}
    {<read> exp=E0() {return sem.inst_lectura(exp);}}
  Inst InstrEscritura(): {Exp exp;}
    {<write> exp=E0() {return sem.inst_escritura(exp);}}
  Inst InstrNewLine(): {Exp exp;}
    {<nl> {return sem.inst_new_line();}}
  Inst InstrReservMem(): {Exp exp;}
    {<New> exp=E0() {return sem.inst_reserv_mem(exp);}}
  Inst InstrLibMem(): {Exp exp;}
    {<delete> exp=E0() {return sem.inst_lib_mem(exp);}}
  Inst InstrInvocProc(): {Token id; ParamsR params;}
    {<call> id=<Id> params=ParametrosReales() {return sem.inst_invoc_proc(sem.str(id.image, id.beginLine, id.beginColumn), params);}}
  ParamsR ParametrosReales(): {ParamsR params;}
    {"(" params=RPR(sem.params_vacio()) {return params;}}
  ParamsR RPR(ParamsR paramsh): {Expresiones exps;}
    {exps=Expresiones() ")" {return sem.params_lleno(exps);} |
    ")" {return paramsh;}}
  Expresiones Expresiones(): {Expresiones exps; Exp exp;}
    {exp=E0() exps=RE(sem.exprs_una(exp)) {return exps;}}
  Expresiones RE(Expresiones expsh) : {Exp exp; Expresiones exps;}
    {"," exp=E0() exps=RE(sem.exprs_muchas(expsh, exp)) {return exps;} |
    {return expsh;}}
  
  Exp EBasica(): {Token entero, real, verdad, falso, ccadena, id, none;}
    {entero=<NumInt> {return sem.num_int(sem.str(entero.image, entero.beginLine, entero.beginColumn));} |
    real=<NumReal> {return sem.num_real(sem.str(real.image, real.beginLine, real.beginColumn));} |
    verdad=<True> {return sem.verdad();} |
    falso=<False> {return sem.falso();} |
    ccadena=<cadena> {return sem.string(sem.str(ccadena.image, ccadena.beginLine, ccadena.beginColumn));} |
    id=<Id> {return sem.id(sem.str(id.image, id.beginLine, id.beginColumn));} |
    none=<Null> {return sem.none();}}
  Exp E0(): {Exp arg0, resul;}
    {arg0=E1() resul=RE0(arg0) {return resul;}}
  Exp RE0(Exp argh): {Exp arg1;}
    {"+" arg1=E0() {return sem.exp("+", argh, arg1);} |
    "-" arg1=E1() {return sem.exp("-", argh, arg1);} |
    {return argh;}}
  Exp E1(): {Exp arg0, resul;}
    {arg0=E2() resul=RE1(arg0) {return resul;}}
  Exp RE1(Exp exph): {String op; Exp arg1; Exp exp;} 
    {op=OP1() arg1=E2() exp=RE1(sem.exp(op, exph, arg1)) {return exp;} |
    {return exph;}}
  Exp E2(): {Exp arg0, resul;}
    {arg0=E3() resul=RE2(arg0) {return resul;}}
  Exp RE2(Exp exph): {String op; Exp arg1; Exp exp;} 
    {op=OP2() arg1=E3() exp=RE2(sem.exp(op, exph, arg1)) {return exp;} |
    {return exph;}}
  Exp E3(): {Exp arg0, resul;}
    {arg0=E4() resul=RE3(arg0) {return resul;}}
  Exp RE3(Exp argh) : {String op; Exp arg1;} 
    {op=OP3() arg1=E4() {return sem.exp(op, argh, arg1);} |
    {return argh;}}
  Exp E4(): {Exp exp;}
    {"-" exp=E5() {return sem.exp("-", exp);} |
    <not> exp=E4() {return sem.exp("not", exp);} |
    exp=E5() {return exp;}}
  Exp E5(): {Exp arg0, resul;}
    {arg0=E6() resul=RE5(arg0) {return resul;}}
  Exp RE5(Exp argh): {Exp arg1, resul; Token id;}
    {"[" arg1=E0() "]" resul=RE5(sem.exp("[]", argh, arg1)){return resul;} |
    "." id=<Id> resul=RE5(sem.exp(".", argh, sem.str(id.image, id.beginLine, id.beginColumn))) {return resul;} |
    "->" id=<Id> resul=RE5(sem.exp("->", argh, sem.str(id.image, id.beginLine, id.beginColumn))) {return resul;} |
    {return argh;}}
  Exp E6(): {Exp exp;}
  	{"*" exp=E6() {return sem.exp(exp);} |
  	exp=E7() {return exp;}}
  Exp E7(): {Exp exp;}
  	{"(" exp=E0() ")" {return exp;} |
  	exp=EBasica() {return exp;}}
  
  String OP1(): {}
    {<and> {return "and";} |
    <or> {return "or";}}
  String OP2(): {}
    {"<" {return "<";} |
    ">" {return ">";} |
    "<=" {return "<=";} |
    ">=" {return ">=";} |
    "==" {return "==";} |
    "!=" {return "!=";}}
  String OP3(): {}
    {"*" {return "*";} |
    "/" {return "/";} |
    "%" {return "%";}}
