
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 27 20:13:20 CEST 2022
//----------------------------------------------------

package Pr4.AST;

import Pr4.AST.TinyASint.*;
import java_cup.runtime.*;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 27 20:13:20 CEST 2022
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\006\005\000\002\007\006\000\002\010\004\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\004\000\002\012\005\000\002\013\005\000\002\014\003" +
    "\000\002\014\002\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\010\000\002\015\006\000\002\016\005\000\002\016" +
    "\003\000\002\017\004\000\002\015\004\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\023\003\000\002\023\002\000\002\024\007\000" +
    "\002\025\011\000\002\026\007\000\002\027\004\000\002" +
    "\030\004\000\002\031\003\000\002\032\004\000\002\033" +
    "\004\000\002\034\005\000\002\035\004\000\002\035\005" +
    "\000\002\036\005\000\002\036\003\000\002\037\005\000" +
    "\002\037\005\000\002\037\003\000\002\040\005\000\002" +
    "\040\003\000\002\041\005\000\002\041\003\000\002\042" +
    "\005\000\002\042\003\000\002\043\004\000\002\043\004" +
    "\000\002\043\003\000\002\044\006\000\002\044\005\000" +
    "\002\044\005\000\002\044\003\000\002\045\004\000\002" +
    "\045\003\000\002\046\005\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\003\000" +
    "\002\047\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\060\007\050\012\033\013\027\026\017\034" +
    "\025\035\053\040\014\041\032\042\051\043\021\047\046" +
    "\052\016\057\026\060\012\061\044\062\013\063\042\064" +
    "\062\065\015\066\006\067\040\070\023\074\030\001\002" +
    "\000\016\002\uffd9\005\uffd9\027\uffd9\045\uffd9\046\uffd9\051" +
    "\uffd9\001\002\000\016\002\uffdf\005\uffdf\027\uffdf\045\uffdf" +
    "\046\uffdf\051\uffdf\001\002\000\072\002\uffb2\005\uffb2\006" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\036\uffb2" +
    "\037\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\001" +
    "\002\000\016\002\uffd7\005\uffd7\027\uffd7\045\uffd7\046\uffd7" +
    "\051\uffd7\001\002\000\016\002\uffdb\005\uffdb\027\uffdb\045" +
    "\uffdb\046\uffdb\051\uffdb\001\002\000\006\004\240\005\241" +
    "\001\002\000\030\007\050\012\033\013\027\034\025\035" +
    "\053\040\014\041\032\066\006\067\040\070\023\074\030" +
    "\001\002\000\030\007\050\012\033\013\027\034\025\035" +
    "\053\040\014\041\032\066\006\067\040\070\023\074\030" +
    "\001\002\000\030\007\050\012\033\013\027\034\025\035" +
    "\053\040\014\041\032\066\006\067\040\070\023\074\030" +
    "\001\002\000\022\053\121\054\120\056\124\070\123\071" +
    "\115\072\125\073\117\075\122\001\002\000\004\070\222" +
    "\001\002\000\062\007\050\012\033\013\027\026\017\027" +
    "\uffee\034\025\035\053\040\014\041\032\042\051\043\021" +
    "\047\046\052\016\057\026\060\012\061\044\062\013\063" +
    "\042\064\062\065\015\066\006\067\040\070\023\074\030" +
    "\001\002\000\016\002\uffda\005\uffda\027\uffda\045\uffda\046" +
    "\uffda\051\uffda\001\002\000\030\007\050\012\033\013\027" +
    "\034\025\035\053\040\014\041\032\066\006\067\040\070" +
    "\023\074\030\001\002\000\016\002\uffe1\005\uffe1\027\uffe1" +
    "\045\uffe1\046\uffe1\051\uffe1\001\002\000\072\002\uffad\005" +
    "\uffad\006\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\036\uffad\037\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051" +
    "\uffad\001\002\000\016\002\uffde\005\uffde\027\uffde\045\uffde" +
    "\046\uffde\051\uffde\001\002\000\072\002\uffb0\005\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\036\uffb0" +
    "\037\uffb0\044\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0\001" +
    "\002\000\030\007\050\012\033\013\027\034\025\035\053" +
    "\040\014\041\032\066\006\067\040\070\023\074\030\001" +
    "\002\000\024\007\050\013\027\034\025\035\053\041\032" +
    "\066\006\067\040\070\023\074\030\001\002\000\072\002" +
    "\uffae\005\uffae\006\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae" +
    "\032\uffae\036\uffae\037\uffae\044\uffae\045\uffae\046\uffae\050" +
    "\uffae\051\uffae\001\002\000\016\002\uffdd\005\uffdd\027\uffdd" +
    "\045\uffdd\046\uffdd\051\uffdd\001\002\000\072\002\uffac\005" +
    "\uffac\006\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\036\uffac\037\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\001\002\000\024\007\050\013\027\034\025\035\053" +
    "\041\032\066\006\067\040\070\023\074\030\001\002\000" +
    "\006\004\ufffc\005\ufffc\001\002\000\004\002\204\001\002" +
    "\000\016\002\uffdc\005\uffdc\027\uffdc\045\uffdc\046\uffdc\051" +
    "\uffdc\001\002\000\016\002\uffe0\005\uffe0\027\uffe0\045\uffe0" +
    "\046\uffe0\051\uffe0\001\002\000\072\002\uffb1\005\uffb1\006" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\036\uffb1" +
    "\037\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1\001" +
    "\002\000\016\002\uffd6\005\uffd6\027\uffd6\045\uffd6\046\uffd6" +
    "\051\uffd6\001\002\000\016\002\uffcd\005\uffcd\027\uffcd\045" +
    "\uffcd\046\uffcd\051\uffcd\001\002\000\010\002\uffff\005\200" +
    "\027\uffff\001\002\000\030\007\050\012\033\013\027\034" +
    "\025\035\053\040\014\041\032\066\006\067\040\070\023" +
    "\074\030\001\002\000\006\004\ufffa\005\ufffa\001\002\000" +
    "\030\007\050\012\033\013\027\034\025\035\053\040\014" +
    "\041\032\066\006\067\040\070\023\074\030\001\002\000" +
    "\016\002\uffd8\005\uffd8\027\uffd8\045\uffd8\046\uffd8\051\uffd8" +
    "\001\002\000\030\007\050\012\033\013\027\034\025\035" +
    "\053\040\014\041\032\066\006\067\040\070\023\074\030" +
    "\001\002\000\004\070\154\001\002\000\072\002\uffb4\005" +
    "\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\036\uffb4\037\uffb4\044\uffb4\045\uffb4\046\uffb4\050\uffb4\051" +
    "\uffb4\001\002\000\072\002\uffaf\005\uffaf\006\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\036\uffaf\037\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\001\002\000\072" +
    "\002\uffb6\005\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\036\uffb6\037\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\050\uffb6\051\uffb6\001\002\000\006\004\ufffd\005\ufffd\001" +
    "\002\000\072\002\uffba\005\uffba\006\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\147\025\uffba\027\uffba" +
    "\030\145\031\146\032\uffba\036\uffba\037\uffba\044\uffba\045" +
    "\uffba\046\uffba\050\uffba\051\uffba\001\002\000\064\002\uffbd" +
    "\005\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\025\uffbd\027\uffbd\032\uffbd\036\uffbd\037\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd\001\002\000\064" +
    "\002\uffbf\005\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\110\014\113\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\112\025\uffbf\027\uffbf\032\uffbf\036\uffbf\037" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf\001\002" +
    "\000\056\002\uffc1\005\uffc1\006\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\015\100\016\101\017\105\020\102\021\106\022\104" +
    "\025\uffc1\027\uffc1\032\uffc1\036\uffc1\037\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\050\uffc1\051\uffc1\001\002\000\022\053\121" +
    "\054\120\056\124\070\123\071\115\072\125\073\117\075" +
    "\122\001\002\000\042\002\uffc3\005\uffc3\006\uffc3\010\uffc3" +
    "\011\073\012\072\025\uffc3\027\uffc3\032\uffc3\036\071\037" +
    "\074\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\001\002" +
    "\000\004\006\066\001\002\000\006\004\ufffb\005\ufffb\001" +
    "\002\000\030\007\050\012\033\013\027\034\025\035\053" +
    "\040\014\041\032\066\006\067\040\070\023\074\030\001" +
    "\002\000\016\002\uffd5\005\uffd5\027\uffd5\045\uffd5\046\uffd5" +
    "\051\uffd5\001\002\000\030\007\050\012\033\013\027\034" +
    "\025\035\053\040\014\041\032\066\006\067\040\070\023" +
    "\074\030\001\002\000\030\007\uffab\012\uffab\013\uffab\034" +
    "\uffab\035\uffab\040\uffab\041\uffab\066\uffab\067\uffab\070\uffab" +
    "\074\uffab\001\002\000\030\007\050\012\033\013\027\034" +
    "\025\035\053\040\014\041\032\066\006\067\040\070\023" +
    "\074\030\001\002\000\030\007\050\012\033\013\027\034" +
    "\025\035\053\040\014\041\032\066\006\067\040\070\023" +
    "\074\030\001\002\000\030\007\uffaa\012\uffaa\013\uffaa\034" +
    "\uffaa\035\uffaa\040\uffaa\041\uffaa\066\uffaa\067\uffaa\070\uffaa" +
    "\074\uffaa\001\002\000\032\002\uffc5\005\uffc5\006\uffc5\010" +
    "\uffc5\025\uffc5\027\uffc5\032\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\050\uffc5\051\uffc5\001\002\000\036\002\uffc4\005\uffc4\006" +
    "\uffc4\010\uffc4\025\uffc4\027\uffc4\032\uffc4\036\071\037\074" +
    "\044\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\001\002\000" +
    "\056\002\uffc2\005\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\015\100\016\101\017\105\020\102\021\106\022\104\025" +
    "\uffc2\027\uffc2\032\uffc2\036\uffc2\037\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\050\uffc2\051\uffc2\001\002\000\030\007\uffa9\012" +
    "\uffa9\013\uffa9\034\uffa9\035\uffa9\040\uffa9\041\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\074\uffa9\001\002\000\030\007\uffa7\012" +
    "\uffa7\013\uffa7\034\uffa7\035\uffa7\040\uffa7\041\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\074\uffa7\001\002\000\030\007\uffa6\012" +
    "\uffa6\013\uffa6\034\uffa6\035\uffa6\040\uffa6\041\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\074\uffa6\001\002\000\030\007\050\012" +
    "\033\013\027\034\025\035\053\040\014\041\032\066\006" +
    "\067\040\070\023\074\030\001\002\000\030\007\uffa4\012" +
    "\uffa4\013\uffa4\034\uffa4\035\uffa4\040\uffa4\041\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\074\uffa4\001\002\000\030\007\uffa8\012" +
    "\uffa8\013\uffa8\034\uffa8\035\uffa8\040\uffa8\041\uffa8\066\uffa8" +
    "\067\uffa8\070\uffa8\074\uffa8\001\002\000\030\007\uffa5\012" +
    "\uffa5\013\uffa5\034\uffa5\035\uffa5\040\uffa5\041\uffa5\066\uffa5" +
    "\067\uffa5\070\uffa5\074\uffa5\001\002\000\064\002\uffc0\005" +
    "\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\110\014\113" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\112\025\uffc0\027\uffc0\032\uffc0\036\uffc0\037\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\050\uffc0\051\uffc0\001\002\000\030\007" +
    "\uffa3\012\uffa3\013\uffa3\034\uffa3\035\uffa3\040\uffa3\041\uffa3" +
    "\066\uffa3\067\uffa3\070\uffa3\074\uffa3\001\002\000\030\007" +
    "\050\012\033\013\027\034\025\035\053\040\014\041\032" +
    "\066\006\067\040\070\023\074\030\001\002\000\030\007" +
    "\uffa1\012\uffa1\013\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\074\uffa1\001\002\000\030\007" +
    "\uffa2\012\uffa2\013\uffa2\034\uffa2\035\uffa2\040\uffa2\041\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\074\uffa2\001\002\000\064\002" +
    "\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\025\uffbe\027\uffbe\032\uffbe\036\uffbe\037\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\001\002\000" +
    "\006\033\uffec\070\uffec\001\002\000\004\070\144\001\002" +
    "\000\006\033\uffea\070\uffea\001\002\000\004\024\137\001" +
    "\002\000\004\026\127\001\002\000\006\033\uffe9\070\uffe9" +
    "\001\002\000\006\033\uffed\070\uffed\001\002\000\022\053" +
    "\121\054\120\056\124\070\123\071\115\072\125\073\117" +
    "\075\122\001\002\000\006\033\uffeb\070\uffeb\001\002\000" +
    "\006\033\uffe3\070\uffe3\001\002\000\022\053\121\054\120" +
    "\056\124\070\123\071\115\072\125\073\117\075\122\001" +
    "\002\000\004\070\136\001\002\000\006\005\134\027\133" +
    "\001\002\000\006\005\uffe5\027\uffe5\001\002\000\006\033" +
    "\uffe7\070\uffe7\001\002\000\022\053\121\054\120\056\124" +
    "\070\123\071\115\072\125\073\117\075\122\001\002\000" +
    "\006\005\uffe6\027\uffe6\001\002\000\006\005\uffe4\027\uffe4" +
    "\001\002\000\004\066\140\001\002\000\004\025\141\001" +
    "\002\000\004\055\142\001\002\000\022\053\121\054\120" +
    "\056\124\070\123\071\115\072\125\073\117\075\122\001" +
    "\002\000\006\033\uffe8\070\uffe8\001\002\000\006\004\ufff9" +
    "\005\ufff9\001\002\000\004\070\153\001\002\000\004\070" +
    "\152\001\002\000\030\007\050\012\033\013\027\034\025" +
    "\035\053\040\014\041\032\066\006\067\040\070\023\074" +
    "\030\001\002\000\004\025\151\001\002\000\072\002\uffb9" +
    "\005\uffb9\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\036\uffb9\037\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9" +
    "\051\uffb9\001\002\000\072\002\uffb7\005\uffb7\006\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\036\uffb7\037\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\001\002\000" +
    "\072\002\uffb8\005\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\036\uffb8\037\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\050\uffb8\051\uffb8\001\002\000\004\007\155\001\002" +
    "\000\024\010\163\053\121\054\120\056\124\070\123\071" +
    "\115\072\125\073\117\075\122\001\002\000\004\026\017" +
    "\001\002\000\006\004\ufff7\005\ufff7\001\002\000\006\033" +
    "\170\070\167\001\002\000\006\010\ufff3\032\ufff3\001\002" +
    "\000\006\010\165\032\164\001\002\000\004\026\ufff6\001" +
    "\002\000\022\053\121\054\120\056\124\070\123\071\115" +
    "\072\125\073\117\075\122\001\002\000\004\026\ufff5\001" +
    "\002\000\006\010\ufff4\032\ufff4\001\002\000\006\010\ufff2" +
    "\032\ufff2\001\002\000\004\070\171\001\002\000\006\010" +
    "\ufff1\032\ufff1\001\002\000\004\010\173\001\002\000\072" +
    "\002\uffb3\005\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\036\uffb3\037\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\050\uffb3\051\uffb3\001\002\000\004\050\175\001\002\000" +
    "\054\007\050\012\033\013\027\026\017\034\025\035\053" +
    "\040\014\041\032\043\021\047\046\051\uffd3\052\016\057" +
    "\026\060\012\061\044\062\013\063\042\066\006\067\040" +
    "\070\023\074\030\001\002\000\004\051\202\001\002\000" +
    "\012\005\200\045\uffd4\046\uffd4\051\uffd4\001\002\000\052" +
    "\007\050\012\033\013\027\026\017\034\025\035\053\040" +
    "\014\041\032\043\021\047\046\052\016\057\026\060\012" +
    "\061\044\062\013\063\042\066\006\067\040\070\023\074" +
    "\030\001\002\000\016\002\uffe2\005\uffe2\027\uffe2\045\uffe2" +
    "\046\uffe2\051\uffe2\001\002\000\016\002\uffd0\005\uffd0\027" +
    "\uffd0\045\uffd0\046\uffd0\051\uffd0\001\002\000\016\002\uffcf" +
    "\005\uffcf\027\uffcf\045\uffcf\046\uffcf\051\uffcf\001\002\000" +
    "\004\002\000\001\002\000\072\002\uffbc\005\uffbc\006\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\147" +
    "\025\uffbc\027\uffbc\030\145\031\146\032\uffbc\036\uffbc\037" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\001\002" +
    "\000\072\002\uffb5\005\uffb5\006\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\036\uffb5\037\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\050\uffb5\051\uffb5\001\002\000\016\002\uffcc\005" +
    "\uffcc\027\uffcc\045\uffcc\046\uffcc\051\uffcc\001\002\000\004" +
    "\044\211\001\002\000\056\007\050\012\033\013\027\026" +
    "\017\034\025\035\053\040\014\041\032\043\021\045\uffd3" +
    "\046\uffd3\047\046\052\016\057\026\060\012\061\044\062" +
    "\013\063\042\066\006\067\040\070\023\074\030\001\002" +
    "\000\006\045\213\046\214\001\002\000\054\007\050\012" +
    "\033\013\027\026\017\034\025\035\053\040\014\041\032" +
    "\043\021\046\uffd3\047\046\052\016\057\026\060\012\061" +
    "\044\062\013\063\042\066\006\067\040\070\023\074\030" +
    "\001\002\000\016\002\uffd2\005\uffd2\027\uffd2\045\uffd2\046" +
    "\uffd2\051\uffd2\001\002\000\004\046\216\001\002\000\016" +
    "\002\uffd1\005\uffd1\027\uffd1\045\uffd1\046\uffd1\051\uffd1\001" +
    "\002\000\004\027\221\001\002\000\004\027\uffef\001\002" +
    "\000\020\002\ufff0\004\ufff0\005\ufff0\027\ufff0\045\ufff0\046" +
    "\ufff0\051\ufff0\001\002\000\004\007\223\001\002\000\032" +
    "\007\050\010\227\012\033\013\027\034\025\035\053\040" +
    "\014\041\032\066\006\067\040\070\023\074\030\001\002" +
    "\000\016\002\uffca\005\uffca\027\uffca\045\uffca\046\uffca\051" +
    "\uffca\001\002\000\006\010\uffc6\032\uffc6\001\002\000\006" +
    "\010\231\032\230\001\002\000\016\002\uffc9\005\uffc9\027" +
    "\uffc9\045\uffc9\046\uffc9\051\uffc9\001\002\000\030\007\050" +
    "\012\033\013\027\034\025\035\053\040\014\041\032\066" +
    "\006\067\040\070\023\074\030\001\002\000\016\002\uffc8" +
    "\005\uffc8\027\uffc8\045\uffc8\046\uffc8\051\uffc8\001\002\000" +
    "\006\010\uffc7\032\uffc7\001\002\000\004\070\234\001\002" +
    "\000\006\004\ufff8\005\ufff8\001\002\000\064\002\uffbb\005" +
    "\uffbb\006\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\025\uffbb\027\uffbb\032\uffbb\036\uffbb\037\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\050\uffbb\051\uffbb\001\002\000\016\002" +
    "\uffce\005\uffce\027\uffce\045\uffce\046\uffce\051\uffce\001\002" +
    "\000\016\002\uffcb\005\uffcb\027\uffcb\045\uffcb\046\uffcb\051" +
    "\uffcb\001\002\000\052\007\050\012\033\013\027\026\017" +
    "\034\025\035\053\040\014\041\032\043\021\047\046\052" +
    "\016\057\026\060\012\061\044\062\013\063\042\066\006" +
    "\067\040\070\023\074\030\001\002\000\010\042\051\064" +
    "\062\065\015\001\002\000\006\004\ufffe\005\ufffe\001\002" +
    "\000\010\002\001\005\200\027\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\070\002\034\003\010\004\054\005\033\006" +
    "\064\007\044\013\040\020\042\021\021\022\036\024\004" +
    "\025\023\026\030\027\035\030\007\031\017\032\003\033" +
    "\046\034\006\037\063\040\062\041\060\042\057\043\056" +
    "\044\055\045\053\046\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\037\236\040\062\041" +
    "\060\042\057\043\056\044\055\045\053\046\051\001\001" +
    "\000\022\037\235\040\062\041\060\042\057\043\056\044" +
    "\055\045\053\046\051\001\001\000\012\043\234\044\055" +
    "\045\053\046\051\001\001\000\004\015\232\001\001\000" +
    "\002\001\001\000\072\002\217\003\010\004\054\005\033" +
    "\006\064\007\044\013\040\014\216\020\042\021\021\022" +
    "\036\024\004\025\023\026\030\027\035\030\007\031\017" +
    "\032\003\033\046\034\006\037\063\040\062\041\060\042" +
    "\057\043\056\044\055\045\053\046\051\001\001\000\002" +
    "\001\001\000\022\037\207\040\062\041\060\042\057\043" +
    "\056\044\055\045\053\046\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\037\206\040\062\041\060\042\057\043\056\044\055" +
    "\045\053\046\051\001\001\000\006\045\205\046\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\044\204\045\053\046\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\037\202\040\062\041\060\042\057" +
    "\043\056\044\055\045\053\046\051\001\001\000\002\001" +
    "\001\000\022\037\173\040\062\041\060\042\057\043\056" +
    "\044\055\045\053\046\051\001\001\000\002\001\001\000" +
    "\022\037\171\040\062\041\060\042\057\043\056\044\055" +
    "\045\053\046\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\110\001" +
    "\001\000\004\050\102\001\001\000\004\015\115\001\001" +
    "\000\004\047\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\037\066\040\062\041\060\042\057\043\056" +
    "\044\055\045\053\046\051\001\001\000\002\001\001\000" +
    "\016\041\076\042\057\043\056\044\055\045\053\046\051" +
    "\001\001\000\002\001\001\000\020\040\075\041\060\042" +
    "\057\043\056\044\055\045\053\046\051\001\001\000\022" +
    "\037\074\040\062\041\060\042\057\043\056\044\055\045" +
    "\053\046\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\067\001\001\000\004\050\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\106\043\056\044\055\045\053\046\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\110\001\001\000\002\001\001\000\012\043\113\044" +
    "\055\045\053\046\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\127" +
    "\016\130\017\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\127" +
    "\017\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\037\147\040\062" +
    "\041\060\042\057\043\056\044\055\045\053\046\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\155\001\001\000\010\011" +
    "\161\012\160\015\157\001\001\000\004\013\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\165\015\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\013\040\020" +
    "\176\021\021\022\036\023\175\024\004\025\023\026\030" +
    "\027\035\030\007\031\017\032\003\033\046\034\006\037" +
    "\063\040\062\041\060\042\057\043\056\044\055\045\053" +
    "\046\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\013\040\021\200\022\036\024\004\025\023\026\030" +
    "\027\035\030\007\031\017\032\003\033\046\034\006\037" +
    "\063\040\062\041\060\042\057\043\056\044\055\045\053" +
    "\046\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\013" +
    "\040\020\176\021\021\022\036\023\211\024\004\025\023" +
    "\026\030\027\035\030\007\031\017\032\003\033\046\034" +
    "\006\037\063\040\062\041\060\042\057\043\056\044\055" +
    "\045\053\046\051\001\001\000\002\001\001\000\056\013" +
    "\040\020\176\021\021\022\036\023\214\024\004\025\023" +
    "\026\030\027\035\030\007\031\017\032\003\033\046\034" +
    "\006\037\063\040\062\041\060\042\057\043\056\044\055" +
    "\045\053\046\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\223\001\001\000\024\036" +
    "\225\037\224\040\062\041\060\042\057\043\056\044\055" +
    "\045\053\046\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\037\231" +
    "\040\062\041\060\042\057\043\056\044\055\045\053\046" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\013\040\020\242\021\021" +
    "\022\036\024\004\025\023\026\030\027\035\030\007\031" +
    "\017\032\003\033\046\034\006\037\063\040\062\041\060" +
    "\042\057\043\056\044\055\045\053\046\051\001\001\000" +
    "\012\004\241\005\033\006\064\007\044\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Declaraciones SEP_SEC Instrucciones 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog_con_decs(decs, insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrucciones 
            {
              Prog RESULT =null;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog_sin_decs(insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaraciones SEP_INS Declaracion 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(decs,dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= DeclaracionVar 
            {
              Dec RESULT =null;
		Dec_var dec_var = (Dec_var)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec_var; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= DeclaracionTipo 
            {
              Dec RESULT =null;
		Dec_tipo dec_tipo = (Dec_tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec_tipo; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= DeclaracionProc 
            {
              Dec RESULT =null;
		Dec_proc dec_proc = (Dec_proc)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec_proc; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionVar ::= VAR Tipo ID 
            {
              Dec_var RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_var(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionTipo ::= TYPE Tipo ID 
            {
              Dec_tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_tipo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DeclaracionTipo",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionProc ::= PROC ID ParametrosFormales Bloque 
            {
              Dec_proc RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ParamsF params_f = (ParamsF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_proc(id, params_f, bloque); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DeclaracionProc",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParametrosFormales ::= P_AP P_CIERRE 
            {
              ParamsF RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ParametrosFormales ::= P_AP Parametros P_CIERRE 
            {
              ParamsF RESULT =null;
		ParamsF params = (ParamsF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = params; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parametros ::= Parametros COMA Parametro 
            {
              ParamsF RESULT =null;
		ParamsF params = (ParamsF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ParamF param = (ParamF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.params_muchos_f(params, param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Parametros",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parametros ::= Parametro 
            {
              ParamsF RESULT =null;
		ParamF param = (ParamF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.params_uno_f(param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Parametros",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parametro ::= Tipo ID 
            {
              ParamF RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_f_sin_amp(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Parametro",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parametro ::= Tipo OP_AMP ID 
            {
              ParamF RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_f_con_amp(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Parametro",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bloque ::= LLAVE_AP ProgramaAux LLAVE_CIERRE 
            {
              Bloque RESULT =null;
		Bloque prog = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = prog; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Bloque",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ProgramaAux ::= Programa 
            {
              Bloque RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.bloque_lleno(prog); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ProgramaAux",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ProgramaAux ::= 
            {
              Bloque RESULT =null;
		 RESULT = sem.bloque_vacio(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ProgramaAux",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= ID 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_int(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_real(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_bool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_cadena(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= ARRAY CORCHETE_AP NUM_INT CORCHETE_CIERRE OF Tipo 
            {
              Tipo RESULT =null;
		StringLocalizado num_int = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_array(num_int, tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= RECORD LLAVE_AP Campos LLAVE_CIERRE 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipo_registro(campos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Campos ::= Campos SEP_INS Campo 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_muchos(campos, campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Campos ::= Campo 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_uno(campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Campo ::= Tipo ID 
            {
              Campo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campo",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= POINTER Tipo 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_puntero(tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instrucciones ::= Instrucciones SEP_INS Instruccion 
            {
              Insts RESULT =null;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.insts_muchas(insts, inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instrucciones",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instrucciones ::= Instruccion 
            {
              Insts RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.insts_una(inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instrucciones",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= InstrAsig 
            {
              Inst RESULT =null;
		Inst asig = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = asig; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= InstrIfThen 
            {
              Inst RESULT =null;
		Inst if_then = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = if_then; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= InstrIfThenElse 
            {
              Inst RESULT =null;
		Inst if_then_else = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = if_then_else; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= InstrWhile 
            {
              Inst RESULT =null;
		Inst whilee = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = whilee; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= InstrLectura 
            {
              Inst RESULT =null;
		Inst lectura = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = lectura; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InstrEscritura 
            {
              Inst RESULT =null;
		Inst escritura = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = escritura; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= InstrNewLine 
            {
              Inst RESULT =null;
		Inst new_line = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new_line; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= InstrReservMem 
            {
              Inst RESULT =null;
		Inst reserv_mem = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = reserv_mem; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= InstrLibMem 
            {
              Inst RESULT =null;
		Inst lib_mem = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = lib_mem; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion ::= InstrInvocProc 
            {
              Inst RESULT =null;
		Inst invoc_proc = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = invoc_proc; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion ::= Bloque 
            {
              Inst RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_comp(bloque); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InstrAsig ::= E0 ASIG E0 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_asig(arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrAsig",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InstOpc ::= Instrucciones 
            {
              InstsOpc RESULT =null;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.insts_opc_con_insts(insts); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstOpc",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InstOpc ::= 
            {
              InstsOpc RESULT =null;
		 RESULT = sem.insts_opc_sin_insts(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstOpc",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InstrIfThen ::= IF E0 THEN InstOpc ENDIF 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		InstsOpc bloque_opc = (InstsOpc)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_ifthen(arg0, bloque_opc); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrIfThen",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InstrIfThenElse ::= IF E0 THEN InstOpc ELSE InstOpc ENDIF 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)).value;
		InstsOpc bloque_opc_0 = (InstsOpc)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		InstsOpc bloque_opc_1 = (InstsOpc)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_ifthenelse(arg0, bloque_opc_0, bloque_opc_1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrIfThenElse",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InstrWhile ::= WHILE E0 DO InstOpc ENDWHILE 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		InstsOpc bloque_opc = (InstsOpc)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_while(arg0, bloque_opc); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrWhile",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InstrLectura ::= READ E0 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_lectura(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrLectura",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InstrEscritura ::= WRITE E0 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_escritura(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrEscritura",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InstrNewLine ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_new_line(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrNewLine",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstrReservMem ::= NEW E0 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_reserv_mem(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrReservMem",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InstrLibMem ::= DELETE E0 
            {
              Inst RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_lib_mem(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrLibMem",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InstrInvocProc ::= CALL ID ParamsR 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		ParamsR params_r = (ParamsR)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_invoc_proc(id, params_r); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstrInvocProc",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ParamsR ::= P_AP P_CIERRE 
            {
              ParamsR RESULT =null;
		 RESULT = sem.params_vacio(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamsR",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ParamsR ::= P_AP Exprs P_CIERRE 
            {
              ParamsR RESULT =null;
		Expresiones exprs = (Expresiones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.params_lleno(exprs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamsR",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exprs ::= Exprs COMA E0 
            {
              Expresiones RESULT =null;
		Expresiones exprs = (Expresiones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exprs_muchas(exprs, arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exprs",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exprs ::= E0 
            {
              Expresiones RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exprs_una(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Exprs",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E0 ::= E1 OP_SUMA E0 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("+", arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E0 ::= E1 OP_RESTA E1 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("-", arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op1, arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E2 ::= E2 OP2 E3 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op2, arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E3 ::= E3 OP3 E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op3, arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E4 ::= OP_RESTA E5 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("-", arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("not", arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E5 ::= E5 CORCHETE_AP E0 CORCHETE_CIERRE 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.exp("[]", arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= E5 PUNTO ID 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(".", arg0, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= E5 OP_FLECHA ID 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("->", arg0, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E6 ::= OP_MULT E6 
            {
              Exp RESULT =null;
		Exp arg = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(arg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",35, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",35, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E7 ::= P_AP E0 P_CIERRE 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= NUM_INT 
            {
              Exp RESULT =null;
		StringLocalizado num_int = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.num_int(num_int); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= NUM_REAL 
            {
              Exp RESULT =null;
		StringLocalizado num_real = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.num_real(num_real); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.verdad(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.falso(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= CADENA 
            {
              Exp RESULT =null;
		StringLocalizado cadena = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.cadena(cadena); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E7 ::= ID 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.none(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP1 ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP1 ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP2 ::= OP_MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP2 ::= OP_MEN_IG 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP2 ::= OP_MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP2 ::= OP_MAY_IG 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP2 ::= OP_COMP 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP2 ::= OP_DIST 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP3 ::= OP_MULT 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP3 ::= OP_DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP3 ::= OP_100 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

